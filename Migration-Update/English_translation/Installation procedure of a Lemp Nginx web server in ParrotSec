Installation procedure of a Lemp Nginx web server in ParrotSec
What is LEMP?
You can find what is this combination of these technologies used mainly to define the infrastructure of a web server, using a programming paradigm for development.
In -> <a href="https://en.wikipedia.org/wiki/LAMP_%28software_bundle%29" target="blank">LEMP</a>
First of all you need to have root access
<a href="https://github.com/josegatica/parrot-docu-es/blob/master/set_root_pw.md" target="blank">Set Root Password</a>
Then personalize your ParrotSec
<a href="https://github.com/josegatica/parrot-docu-es/blob/master/personalizar_ParrotSec.md" target="blank">Customize ParrotSec.</a>
The current stable version is ParrotSec 3.8
If you like, you can include this step to become a Beta Tester by following this procedure:
<a href="https://github.com/josegatica/parrot-docu-es/blob/master/get_parrot_cloud_vps_from_kali.md">Parrot 3.9 Intruder</a>
You will need a coffee and follow line by line.
First step
First let's disable Apache

	su
	systemctl stop apache2
	sudo apt autoremove -y
	sudo apt-get remove --purge apache2

Now let's install LEMP with Nginx

	sudo aptitude install nginx mariadb-server mariadb-client php-mysqli php7.1-common php7.1-readline php7.1-fpm php7.1-cli php7.1-gd php7.1-mysql php7.1-mcrypt php7.1-curl php7.1-mbstring php7.1-opcache php7.1-json -y php7.1-zip php-xml apt-transport-https lsb-release ca-certificates wget

Okay now let's stop the database

	sudo /etc/init.d/mysql stop

Ok now let's configure PHP fpm pool and memory limits

	sudo sed -i "s/memory_limit = .*/memory_limit = 256M/" /etc/php/7.1/fpm/php.ini
	sudo sed -i "s/upload_max_filesize = .*/upload_max_filesize = 128M/" /etc/php/7.1/fpm/php.ini
	sudo sed -i "s/zlib.output_compression = .*/zlib.output_compression = on/" /etc/php/7.1/fpm/php.ini
	sudo sed -i "s/max_execution_time = .*/max_execution_time = 18000/" /etc/php/7.1/fpm/php.ini
	sudo mv /etc/php/7.1/fpm/pool.d/www.conf /etc/php/7.1/fpm/pool.d/www.conf.org
	sudo nano /etc/php/7.1/fpm/pool.d/www.conf
	[www] user = www-data group = www-data listen = /run/php/php7.1-fpm.sock listen.owner = www-data listen.group = www-data listen.mode = 0666 pm = ondemand pm.max_children = 5 pm.process_idle_timeout = 10s pm.max_requests = 200 chdir = /

Save the changes with Ctr + x
Let's respond that we are safe by pressing Y
Restart php7.1-fpm to reflect the changes
	
	sudo systemctl restart php7.1-fpm

We create our website define the route where it is located in our storage and listening ports, replace the word mysite.com with your domain and in case you have a secure site protected by a ssl certificate, add port 443.
	
	nano /etc/nginx/sites-available/mysite.com
	server { server_name www.mysite.com mysite.com; listen 80; root /var/www/html/mysite.com; access_log /var/log/nginx/access.log; error_log /var/log/nginx/error.log; index index.php;
	location / { try_files $uri $uri/ /index.php?q=$uri&$args; }
	location ~* .(jpg|jpeg|gif|css|png|js|ico|html)$ { access_log off; expires max; }
	location ~ /.ht { deny all; }
	location ~ .php$ { fastcgi_index index.php; fastcgi_keep_conn on; include /etc/nginx/fastcgi_params; fastcgi_pass unix:/run/php/php7.1-fpm.sock; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; } }

Save the changes Ctrl + x Y
Let's activate our website in Nginx by making a link

	sudo ln -s /etc/nginx/sites-available/mysite.com /etc/nginx/sites-enabled/mysite.com

Let's create the folder for our website

	sudo mkdir -p /var/www/html/mysite.com

Let's give write permissions

	sudo chown www-data: -R /var/www/html/mysite.com
	sudo chown www-data: -R /var/www/html

Download and unzip the version you prefer from Wordpress, the stable version is Wordpress Version Stable 4.8.2.
This procedure was done with the Wordpress development version (4.9-beta4-42031)

	Wordpress Version Estable 4.8.2
	sudo wget https://wordpress.org/latest.zip
	sudo unzip latest.zip -d /var/www/html/mysite.com

	Wordpress nightly-builds
	https://wordpress.org/nightly-builds/wordpress-latest.zip
	sudo unzip wordpress-latest.zip -d /var/www/html/mysite.com

	Wordpress development version (4.9-beta4-42031)
	sudo wget https://wordpress.org/wordpress-4.9-beta4.zip
	sudo unzip wordpress-4.9-beta4.zip -d /var/www/html/mysite.com

	cd /var/www/html/mysite.com/wordpress
	mv -v * /var/www/html/mysite.com
	cd ..
	rm -r wordpress

We create the user database and the key, replace the word YourSecuryKey
For the key that you define

	sudo /etc/init.d/mysql stop
	sudo /etc/init.d/mysql start
	sudo mysqld_safe --skip-grant-tables &
	mysql -uroot
	use mysql;
	update user set password=PASSWORD("YourSecuryKey") where User='root';
	flush privileges;
	quit
	sudo /etc/init.d/mysql stop
	sudo /etc/init.d/mysql start
	mysql -u root -p
	CREATE USER 'wpuser'@'localhost' IDENTIFIED BY 'YourSecuryKey';
	CREATE DATABASE wp_database;
	GRANT ALL ON wp_database.* TO wpuser@localhost;
	flush privileges;
	exit;

Restart MySQL to apply the changes.

	sudo /etc/init.d/mysql restart
	mysqladmin -u root -p status
	ps aux | grep -i sql
	rm /etc/mysql/my.cnf

Activate web services to start automatically with the system

	systemctl enable php7.1-fpm.service
	update-rc.d postgresql enable
	update-rc.d nginx enable
	update-rc.d mysql enable

Let's create the Wordpress configuration file
	
	cp wp-config-sample.php wp-config.php

Document the file with the name of the database the user and the key defined by you

	nano wp-config.php
	Ctrl + x Y

Verify that Web services and databases are operating correctly.

	sudo service php7.1-fpm status -l
	sudo service nginx status -l
	sudo service mysql status -l
	sudo service postgresql status -l

Point your website to the route you created

	nano /etc/nginx/sites-available/default

Replace the 42 Line with:

	root /var/www/html/mysite.com;
	Ctrl + x Y

Set the memory value to load plugins and import Wordpress rests

	nano /etc/nginx/

Search this area in the file and add the line

	# Basic Settings
    	##
	client_max_body_size 20M;

Let's apply the changes to Nginx

	sudo nginx -t
	sudo systemctl restart nginx

Restart our machine

	sudo reboot

Verify that the wordpress installation wizard is loading into your machine
Open your browser and log in to your local computer
http://127.0.0.1
If you see the Wordpress logo and the list of languages to install this CMS everything went well
and now you have your own web server.
Make sure that your wordpress version is updated by entering
	mysite.com/wp-admin/update-core.php
<html><img src="https://github.com/4k4xs4pH1r3/parrot-docu-es/blob/master/images/lemp_wp1.png"></html>



#


<html><img src="https://github.com/4k4xs4pH1r3/parrot-docu-es/blob/master/images/lemp_wp2.png"></html>



#


<html><img src="https://github.com/4k4xs4pH1r3/parrot-docu-es/blob/master/images/lemp_wp3.png"></html>



#


<html><img src="https://github.com/4k4xs4pH1r3/parrot-docu-es/blob/master/images/lemp_wp4.png"></html>




#
Now let's install wp cli to manage Wordpress from the terminal

	cd
	curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
	hp wp-cli.phar --info
	chmod +x wp-cli.phar
	sudo mv wp-cli.phar /usr/local/bin/wp
	wp --info

	wget https://raw.githubusercontent.com/wp-cli/wp-cli/master/utils/wp-completion.bash
	nano ~/.bash_profile
	source /root/wp-completion.bash
	Ctr + x Y

	cd /var/www/html/mysite.com

Let's close the root session since wp cli does not recommend doing it with this user

	exit
	wp cli update
	wp cli info
	wp cli version
	wp plugin update --all
