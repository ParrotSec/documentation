{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home For the Parrot Linux homepage, visit parrotsec.org . An important part of any operating system is documentation, the technical manuals which describe the operation and use of programs. As part of its efforts to create a high-quality free operating system, Parrot Linux is making every effort to provide all of its users with proper documentation in an easily accessible form. The documentation is still under construction, and all the Parrot users are invited to contribute to the creation and translation process of this portal. Documentation Introduction What is Parrot Should I use Parrot? Getting Started Start here Install Parrot Need help? Contact our Staff We have a staff of volunteers and community members who can help you troubleshoot system bugs and guide you from installation to configuration and customization of the system. Debian Documentation Parrot Linux is based on top of the testing branch of Debian GNU/Linux, then most of the Debian Documentation is valid for Parrot as well. Debian Handbook , the comprehensive user manual Debian Reference , a terse user's guide with the focus on the shell command line The Debian Wiki Warrant Canary","title":"Home"},{"location":"#home","text":"For the Parrot Linux homepage, visit parrotsec.org . An important part of any operating system is documentation, the technical manuals which describe the operation and use of programs. As part of its efforts to create a high-quality free operating system, Parrot Linux is making every effort to provide all of its users with proper documentation in an easily accessible form. The documentation is still under construction, and all the Parrot users are invited to contribute to the creation and translation process of this portal.","title":"Home"},{"location":"#documentation","text":"","title":"Documentation"},{"location":"#introduction","text":"What is Parrot Should I use Parrot?","title":"Introduction"},{"location":"#getting-started","text":"Start here Install Parrot","title":"Getting Started"},{"location":"#need-help-contact-our-staff","text":"We have a staff of volunteers and community members who can help you troubleshoot system bugs and guide you from installation to configuration and customization of the system.","title":"Need help? Contact our Staff"},{"location":"#debian-documentation","text":"Parrot Linux is based on top of the testing branch of Debian GNU/Linux, then most of the Debian Documentation is valid for Parrot as well. Debian Handbook , the comprehensive user manual Debian Reference , a terse user's guide with the focus on the shell command line The Debian Wiki Warrant Canary","title":"Debian Documentation"},{"location":"community/","text":"Community Portal Parrot Linux is a community-driven open source project, and a gateway to spread innovative ideas born inside its community. Join Our Community Join us Social Pages Git Facebook Twitter Youtube Telegram channel Or join #parrotsec on irc.freenode.net Groups Our community lives in several places, here are some links to stay in touch with us Community Forum Telegram International Group Facebook International group Events Check our Events page and meet our team and other community members. Local Communities Arabic Community Telegram Chinese Community Telegram French Community Telegram German Community Telegram Greek Community Telegram Indian Community Telegram Italian Community Telegram Indonesian Community Telegram Spanish Community Telegram Russian Community Telegram Turkish Community Telegram Telegram Algerian Community","title":"Community"},{"location":"community/#community-portal","text":"Parrot Linux is a community-driven open source project, and a gateway to spread innovative ideas born inside its community.","title":"Community Portal"},{"location":"community/#join-our-community","text":"Join us","title":"Join Our Community"},{"location":"community/#social-pages","text":"Git Facebook Twitter Youtube Telegram channel Or join #parrotsec on irc.freenode.net","title":"Social Pages"},{"location":"community/#groups","text":"Our community lives in several places, here are some links to stay in touch with us Community Forum Telegram International Group Facebook International group","title":"Groups"},{"location":"community/#events","text":"Check our Events page and meet our team and other community members.","title":"Events"},{"location":"community/#local-communities","text":"Arabic Community Telegram Chinese Community Telegram French Community Telegram German Community Telegram Greek Community Telegram Indian Community Telegram Italian Community Telegram Indonesian Community Telegram Spanish Community Telegram Russian Community Telegram Turkish Community Telegram Telegram Algerian Community","title":"Local Communities"},{"location":"donate/","text":"Donations HEAD Economical contribution is fundamental to the Parrot Project, as the number of servers needed to keep the infrastructure operational is constantly growing and is something our Core Developers could not afford without the generous assistance of our community. Together we can continue to do the work that needs to be done! ======= Economical contribution is fundamental to Parrot Linux as the amount of servers needed to keep the infrastructure up and running are something our Core Developers could not afford without the generous assistance of our community. Together we can continue to do the work that needs to doing. dev Adopt us on Patreon We are now on Patreon to offer you a new way to contribute to Parrot Linux Adopt us and support our work! Donate with Patreon Paypal Bitcoin Bitcoin Address BTC: 1NB1xDyiSigYNL5gaNXANvP6bYmHr77N1Q Litecoin Litecoin Address LTC: LR5Lxq2M5ijEgLryi6aNd2iFMpxT7pgEKL Ethereum Ethereum Address ETH: 0x64A449d5839813024861601720B173f562c8d3F8 Gadgets Spreadshirt Store Referral links Even if we host most of our infrastructure on bare metal servers, some of our nodes (CDN edge nodes etc) is hosted on famous cloud providers that provide referral programs. Vultr Earn $50, give us $25 (limited) - https://www.vultr.com/?ref=7782068-4F Be active for 30+ days, give us $10 - https://www.vultr.com/?ref=7782050 DigitalOcean Earn $100, give us $25 - https://m.do.co/c/6be719a80450","title":"Donate"},{"location":"donate/#donations","text":"HEAD Economical contribution is fundamental to the Parrot Project, as the number of servers needed to keep the infrastructure operational is constantly growing and is something our Core Developers could not afford without the generous assistance of our community. Together we can continue to do the work that needs to be done! ======= Economical contribution is fundamental to Parrot Linux as the amount of servers needed to keep the infrastructure up and running are something our Core Developers could not afford without the generous assistance of our community. Together we can continue to do the work that needs to doing. dev","title":"Donations"},{"location":"donate/#adopt-us-on-patreon","text":"We are now on Patreon to offer you a new way to contribute to Parrot Linux Adopt us and support our work! Donate with Patreon","title":"Adopt us on Patreon"},{"location":"donate/#paypal","text":"","title":"Paypal"},{"location":"donate/#bitcoin","text":"Bitcoin Address BTC: 1NB1xDyiSigYNL5gaNXANvP6bYmHr77N1Q","title":"Bitcoin"},{"location":"donate/#litecoin","text":"Litecoin Address LTC: LR5Lxq2M5ijEgLryi6aNd2iFMpxT7pgEKL","title":"Litecoin"},{"location":"donate/#ethereum","text":"Ethereum Address ETH: 0x64A449d5839813024861601720B173f562c8d3F8","title":"Ethereum"},{"location":"donate/#gadgets","text":"Spreadshirt Store","title":"Gadgets"},{"location":"donate/#referral-links","text":"Even if we host most of our infrastructure on bare metal servers, some of our nodes (CDN edge nodes etc) is hosted on famous cloud providers that provide referral programs.","title":"Referral links"},{"location":"donate/#vultr","text":"Earn $50, give us $25 (limited) - https://www.vultr.com/?ref=7782068-4F Be active for 30+ days, give us $10 - https://www.vultr.com/?ref=7782050","title":"Vultr"},{"location":"donate/#digitalocean","text":"Earn $100, give us $25 - https://m.do.co/c/6be719a80450","title":"DigitalOcean"},{"location":"faq/","text":"Parrot Linux Frequently Asked Questions Why should I use Parrot? Penetration testing is a time intensive job, maintaining your toolkit shouldn't be also. We make it easier for professionals to accomplish the important stuff by reducing the time and effort wasted making sure their tools work. Read the dedicated documentation page to know more: Should I use parrot? What is the default live password? Live user: user Live pass: live If the password does not work, also try with: toor Parrot does not have a root password since Parrot 4.4, to launch programs as root or to obtain a root terminal, use sudo How can I upgrade my system? There are several different ways to upgrade the parrot system 1) First method Open a terminal window and launch the following command; sudo parrot-upgrade 2) Second method Open a terminal window and launch the following commands sudo apt update sudo apt full-upgrade 3) Third method Open System Administration Package Manager (synaptic) then click on the button to update the packages list. click on the other button to select the upgrades and finally apply the changes. Why isn't $toolname installed? We have a set of requisites to check before a tool makes its way into our repositories such as: Is the tool actively maintained? Does it have the necessary documentation? Is it FLOSS, FOSS or does its license allow redistribution? Are there other tools that do the same thing? Is there someone available to package and maintain it? and more[...]; If the answers were \u201cYes\u201d we're more than glad to take your request via our Community Portal . Where can bugs be submitted? If the bug involves a specific piece of software maintained by Parrot, then search the project on our Dev Portal and open an issue. If the bug involves a software package that is not listed, then you should contact the maintainer of that particular software. If you are not sure what software is involved, or if you don't know how to contact the upstream developer, then contact us on our Community Portal What should my sources.list look like? /etc/apt/sources.list should be EMPTY /etc/apt/sources.list.d/parrot.list should contain the following content deb http://deb.parrotsec.org/parrot stable main contrib non-free #deb-src http://deb.parrotsec.org/parrot stable main contrib non-free The installer wants a CD/DVD but I'm using a USB drive. If this happens, then you did something terribly wrong during the creation of the USB bootable device. This usually happens when you use software that doesn't respect the isohybrid standards. We have a dedicated documentation page which describes this issue, how to fix it and why. Create a Boot Device How do I prepare a bootable Parrot USB drive? 1) Download etcher from our Download page or directly from www.etcher.io . 2) Download the ISO file of the Parrot version you need from our our Download Page 3) Use Etcher to flash the ISO file into a free pen drive (the pen drive will be erased). Read more HERE . I'm new to Linux, please help me! Of Course! Please check out helpme Is this FAQ under construction? Yes it is. Can I contribute to this FAQ? Of course! The pages are written in Markdown and can be accessed here .","title":"F.A.Q."},{"location":"faq/#parrot-linux-frequently-asked-questions","text":"","title":"Parrot Linux Frequently Asked Questions"},{"location":"faq/#why-should-i-use-parrot","text":"Penetration testing is a time intensive job, maintaining your toolkit shouldn't be also. We make it easier for professionals to accomplish the important stuff by reducing the time and effort wasted making sure their tools work. Read the dedicated documentation page to know more: Should I use parrot?","title":"Why should I use Parrot?"},{"location":"faq/#what-is-the-default-live-password","text":"Live user: user Live pass: live If the password does not work, also try with: toor Parrot does not have a root password since Parrot 4.4, to launch programs as root or to obtain a root terminal, use sudo","title":"What is the default live password?"},{"location":"faq/#how-can-i-upgrade-my-system","text":"There are several different ways to upgrade the parrot system 1) First method Open a terminal window and launch the following command; sudo parrot-upgrade 2) Second method Open a terminal window and launch the following commands sudo apt update sudo apt full-upgrade 3) Third method Open System Administration Package Manager (synaptic) then click on the button to update the packages list. click on the other button to select the upgrades and finally apply the changes.","title":"How can I upgrade my system?"},{"location":"faq/#why-isnt-toolname-installed","text":"We have a set of requisites to check before a tool makes its way into our repositories such as: Is the tool actively maintained? Does it have the necessary documentation? Is it FLOSS, FOSS or does its license allow redistribution? Are there other tools that do the same thing? Is there someone available to package and maintain it? and more[...]; If the answers were \u201cYes\u201d we're more than glad to take your request via our Community Portal .","title":"Why isn't $toolname installed?"},{"location":"faq/#where-can-bugs-be-submitted","text":"If the bug involves a specific piece of software maintained by Parrot, then search the project on our Dev Portal and open an issue. If the bug involves a software package that is not listed, then you should contact the maintainer of that particular software. If you are not sure what software is involved, or if you don't know how to contact the upstream developer, then contact us on our Community Portal","title":"Where can bugs be submitted?"},{"location":"faq/#what-should-my-sourceslist-look-like","text":"/etc/apt/sources.list should be EMPTY /etc/apt/sources.list.d/parrot.list should contain the following content deb http://deb.parrotsec.org/parrot stable main contrib non-free #deb-src http://deb.parrotsec.org/parrot stable main contrib non-free","title":"What should my sources.list look like?"},{"location":"faq/#the-installer-wants-a-cddvd-but-im-using-a-usb-drive","text":"If this happens, then you did something terribly wrong during the creation of the USB bootable device. This usually happens when you use software that doesn't respect the isohybrid standards. We have a dedicated documentation page which describes this issue, how to fix it and why. Create a Boot Device","title":"The installer wants a CD/DVD but I'm using a USB drive."},{"location":"faq/#how-do-i-prepare-a-bootable-parrot-usb-drive","text":"1) Download etcher from our Download page or directly from www.etcher.io . 2) Download the ISO file of the Parrot version you need from our our Download Page 3) Use Etcher to flash the ISO file into a free pen drive (the pen drive will be erased). Read more HERE .","title":"How do I prepare a bootable Parrot USB drive?"},{"location":"faq/#im-new-to-linux-please-help-me","text":"Of Course! Please check out helpme","title":"I'm new to Linux, please help me!"},{"location":"faq/#is-this-faq-under-construction","text":"Yes it is.","title":"Is this FAQ under construction?"},{"location":"faq/#can-i-contribute-to-this-faq","text":"Of course! The pages are written in Markdown and can be accessed here .","title":"Can I contribute to this FAQ?"},{"location":"mirror-list/","text":"Introduction Parrot Linux does not only deliver a ready-to-use system in the ISO format, but it also provides a vast amount of additional software that can be installed apart from the official parrot repository. The Parrot repository is used to provide officially supported software, system updates and security fixes. The mirrors network The software in the parrot archive is delivered in form of deb packages, and these packages are served through a vast network of mirror servers that provide the same set of packages distributed all around the world for faster software delivery. The Parrot system is configured to use the central parrot archive directors. The Parrot directors are special servers that collect all the requests of the end users and redirect them to the geographically nearest download server available for the user who made the request. Security measures The Parrot Mirror Network is secured by centralized digital signatures and the mirrors can't inject fake updates. If a evil mirror tries to inject a fake package, the parrot system will automatically refuse to download and install it, and will raise an alert message. This security measure implemented in APT (the parrot/debian package manager) is very efficient and reliable because digital signatures are applied offline by the Parrot archive maintainer, and not by the mirror servers, ensuring direct and secure developer-to-user chain of trust. Configuration and custom setup The APT package manager uses /etc/apt/sources.list and any .list file found in the /etc/apt/sources.list.d/ directory. NOTE: /etc/apt/sources.list is EMPTY and the default APT configuration is located at /etc/apt/sources.list.d/parrot.list. Content of /etc/apt/sources.list.d/parrot.list: deb http://deb.parrotsec.org/parrot stable main contrib non-free #deb-src http://deb.parrotsec.org/parrot stable main contrib non-free Other mirrors for manual configuration NCSA North Central and South Americas Location Mirror ID bandwidth Provider Name URL APT config string Massachussetts MIT 1 Gbps SIPB MIT mirrors.mit.edu/parrot deb http://mirrors.mit.edu/parrot/ parrot main contrib non-free New York Clarkson 1 Gbps Clarkson University mirror.clarkson.edu/parrot deb https://mirror.clarkson.edu/parrot/ parrot main contrib non-free California Berkeley 1 Gbps Berkeley Open Computing Facility mirrors.ocf.berkeley.edu/parrot deb https://mirrors.ocf.berkeley.edu/parrot/ parrot main contrib non-free Oregon Osuosl 1 Gbps Oregon State University - Open Source Lab ftp.osuosl.org/pub/parrotos deb https://ftp.osuosl.org/pub/parrotos parrot main contrib non-free Location Mirror ID bandwidth Provider Name URL APT config string Ecuador CEDIA 100 Mbps RED CEDIA (National research and education center of Ecuador) mirror.cedia.org.ec/parrot deb https://mirror.cedia.org.ec/parrot/ parrot main contrib non-free Ecuador UTA 100 Mbps UTA (Universidad T\u00e9cnica de ambato) mirror.uta.edu.ec/parrot deb https://mirror.uta.edu.ec/parrot/parrot main contrib non-free Brazil USP 1 Gbps University of Sao Paulo sft.if.usp.br/parrot deb http://sft.if.usp.br/parrot/ main contrib non-free Ecuador UEB 100 Mbps UEB (Universidad Estatal de Bolivar) mirror.ueb.edu.ec/parrot deb https://mirror.ueb.edu.ec/parrot/ parrot main contrib non-free EMEA Europe Middle East and Asia Location Mirror ID bandwidth Provider Name URL APT config string Italy GARR 10 Gbps GARR Consortium (Italian Research Education Network) parrot.mirror.garr.it/mirrors/parrot deb https://parrot.mirror.garr.it/mirrors/parrot/ parrot main contrib non-free Germany Halifax 20 Gbps RWTH-Aachen (Halifax students group) ftp.halifax.rwth-aachen.de/parrotsec deb https://ftp.halifax.rwth-aachen.de/parrotsec/ parrot main contrib non-free Germany Esslingen 10 Gbps Esslingen (University of Applied Sciences) ftp-stud.hs-esslingen.de/pub/Mirrors/archive.parrotsec.org deb https://ftp-stud.hs-esslingen.de/pub/Mirrors/archive.parrotsec.org/ parrot main contrib non-free Netherland NLUUG 10 Gbps Nluug ftp.nluug.nl/os/Linux/distr/parrot deb https://ftp.nluug.nl/os/Linux/distr/parrot/ parrot main contrib non-free Sweden UMU 20 Gbps ACC UMU (Academic Computer Club, Umea University) ftp.acc.umu.se/mirror/parrotsec.org/parrot deb https://ftp.acc.umu.se/mirror/parrotsec.org/parrot/ parrot main contrib non-free Greece UOC 1 Gbps UoC (University of Crete - Computer Center) ftp.cc.uoc.gr/mirrors/linux/parrot deb https://ftp.cc.uoc.gr/mirrors/linux/parrot/ parrot main contrib non-free Belgium Belnet 10 Gbps Belnet (The Belgian National Research) ftp.belnet.be/archive.parrotsec.org deb http://ftp.belnet.be/mirror/archive.parrotsec.org/ parrot main contrib non-free Spain Osluz 1 Gbps Osluz (Oficina de software libre de la Universidad de Zaragoza) matojo.unizar.es/parrot deb http://matojo.unizar.es/parrot/ parrot main contrib non-free Portugal UP 1 Gbps U.Porto (University of Porto) mirrors.up.pt/parrot deb https://mirrors.up.pt/parrot/ parrot main contrib non-free Denmark Dotsrc 10 Gbps Dotsrc (Aalborg university) mirrors.dotsrc.org/parrot deb https://mirrors.dotsrc.org/parrot/ parrot main contrib non-free Hungary quantum-mirror 200Mbps quantum-mirror.hu quantum-mirror.hu/mirrors/pub/parrot deb https://quantum-mirror.hu/mirrors/pub/parrot parrot main contrib non-free Turkey EB 100 Mbps EB turkey.archive.parrotsec.org/parrot deb http://turkey.archive.parrotsec.org/parrot/ parrot main contrib non-free Russia Yandex 1 Gbps Yandex mirror.yandex.ru/mirrors/parrot deb https://mirror.yandex.ru/mirrors/parrot/ parrot main contrib non-free Russia Truenetwork 10 Gbps Truenetwork mirror.truenetwork.ru/parrot deb https://mirror.truenetwork.ru/parrot/ parrot main contrib non-free Iran ASIS 1 Gbps ASIS parrot.asis.io deb http://parrot.asis.io/ parrot main contrib non-free APAC Asia and Pacific Location Mirror ID bandwidth Provider Name URL APT config string Bangladesh Amberit 1 Gbps Amberit (formerly Dhakacom) mirror.amberit.com.bd/parrotsec deb http://mirror.amberit.com.bd/parrotsec/ parrot main contrib non-free Taiwan NCHC 20 Gbps NCHC (Free Software Lab) free.nchc.org.tw/parrot deb http://free.nchc.org.tw/parrot/ parrot main contrib non-free Singapore 0x 10 Gbps 0x mirror.0x.sg/parrot deb https://mirror.0x.sg/parrot/ parrot main contrib non-free China USTC 1Gbps CMCC 1Gbps Cernet 300Mbps ChinaNet University of Science and Technology of China and USTCLUG mirrors.ustc.edu.cn/parrot deb http://mirrors.ustc.edu.cn/parrot parrot main contrib non-free China TUNA 2 Gbps TUNA (Tsinghua university of Beijing, TUNA association) mirrors.tuna.tsinghua.edu.cn/parrot deb https://mirrors.tuna.tsinghua.edu.cn/parrot/ parrot main contrib non-free China SHU 2 Gbps SHU(Shanghai University) mirrors.shu.edu.cn/parrot deb https://mirrors.shu.edu.cn/parrot/ parrot main contrib non-free China SJTUG 2 Gbps SJTUG (SJTU *NIX User Group) mirrors.sjtug.sjtu.edu.cn/parrot deb https://mirrors.sjtug.sjtu.edu.cn/parrot/ parrot main contrib non-free New Caledonia Lagoon 1 Gbps Lagoon Networks mirror.lagoon.nc/pub/parrot deb http://mirror.lagoon.nc/pub/parrot/ parrot main contrib non-free Thailand KKU 1 Gbps KKU (Khon Kaen University) mirror.kku.ac.th/parrot deb https://mirror.kku.ac.th/parrot/ parrot main contrib non-free Indonesia Datautama 1 Gbps Datautama (PT. Data Utama Dinamika) kartolo.sby.datautama.net.id/parrot deb http://kartolo.sby.datautama.net.id/parrot/ parrot main contrib non-free Make your own mirror You can set up a Parrot archive mirror on your server for personal or public usage by following the steps below. Make sure to have enough free space You can sync the entire repository or pick just the ISO images. Make sure to have enough free space to host a mirror, and be ready for future upgrades as the archive size fluctuates. The current archive size is available here archive.parrotsec.org/parrot/misc/archive-size.txt Choose the upstream server We handle several domains for repository syncing services, we suggest to use archive.parrotsec.org for automatic and failproof setups, but upstream settings can be adjusted in case of specific needs. Feel free to contact the Parrot team if you have specific mirroring needs or bandwidth limitations. We can provide you dedicated upstream sources or professional support for your mirror. Main Mirror Director: archive.parrotsec.org Global Zones: EMEA: emea.archive.parrotsec.org NCSA: ncsa.archive.parrotsec.org APAC: apac.archive.parrotsec.org Individual Masters: archive1 france: archive1.parrotsec.org archive2 canada: archive2.parrotsec.org archive3 france: archive3.parrotsec.org archive4 poland: archive4.parrotsec.org Single archives may be unavailable or replaced form time to time. archive.parrotsec.org is automatically balanced between all the available mirrors and will give you zero downtimes. Download the archive If you sync the entire archive with the below instructions, you do NOT need to synchronize the ISO archive. ISO files are included by default! Sync the repository rsync -Pahv --delete-after rsync://archive.parrotsec.org:/parrot-iso /var/www/html/parrot Configure a cronjob launch the following command: crontab -e and add the following content to the crontab file: */10 * * * * flock -xn /tmp/parrot-rsync.lock -c 'rsync -aq --delete-after rsync://archive.parrotsec.org:/parrot-iso /var/www/html/parrot' Download the ISO archive only Do not sync the ISO archive if you are already synchronizing the full archive with the above instructions. ISO files are already provided with the instructions in the precedent paragraph. use the following instructions if you want to sync only the ISO files. Sync the repository rsync -Pahv --delete-after rsync://archive.parrotsec.org:/parrot-iso /var/www/html/parrot Configure a cronjob launch the following command: crontab -e and add the following content to the crontab file: 30 2 * * * flock -xn /tmp/parrot-rsync.lock -c 'rsync -aq --delete-after rsync://archive.parrotsec.org:/parrot /var/www/html/parrot-iso' Expose your mirror via rsync Your mirror can be exposed via rsync to allow other people to sync from you and to allow our mirror director to periodically scan your mirror and perform indexing and health checks. Rsync exposure is mandatory to add your mirror to our official list. The following instructions will set up rsync and expose the parrot archive in compliance with our standards on a debian/ubuntu server. Minor adjustments are required for other non-apt systems. install rsync with: sudo apt install rsync edit /etc/rsyncd.conf with nano: sudo nano /etc/rsyncd.conf paste the following settings in the config file and save it: [parrot] comment = Parrot OS - full archive [archive.parrotsec.org/parrot] path = /var/www/html/parrot/ hosts allow = * #hosts deny = * list=true uid=www-data gid=www-data read only = yes use chroot=yes dont compress # for better performance [parrot-iso] comment = Parrot OS - ISO files only [archive.parrotsec.org/parrot-iso] path = /var/www/html/parrot/ exclude = pool dists hosts allow = * list=true uid=www-data gid=www-data read only = yes use chroot=yes dont compress Enable the rsync service: sudo systemctl enable rsync Start the rsync service: sudo service rsync start Make your mirror official If you want your mirror to be added to our official mirrors list and to our mirror directors, contact us with the following email: team AT parrotsec DOT org have fun :)","title":"Mirror list"},{"location":"mirror-list/#introduction","text":"Parrot Linux does not only deliver a ready-to-use system in the ISO format, but it also provides a vast amount of additional software that can be installed apart from the official parrot repository. The Parrot repository is used to provide officially supported software, system updates and security fixes.","title":"Introduction"},{"location":"mirror-list/#the-mirrors-network","text":"The software in the parrot archive is delivered in form of deb packages, and these packages are served through a vast network of mirror servers that provide the same set of packages distributed all around the world for faster software delivery. The Parrot system is configured to use the central parrot archive directors. The Parrot directors are special servers that collect all the requests of the end users and redirect them to the geographically nearest download server available for the user who made the request.","title":"The mirrors network"},{"location":"mirror-list/#security-measures","text":"The Parrot Mirror Network is secured by centralized digital signatures and the mirrors can't inject fake updates. If a evil mirror tries to inject a fake package, the parrot system will automatically refuse to download and install it, and will raise an alert message. This security measure implemented in APT (the parrot/debian package manager) is very efficient and reliable because digital signatures are applied offline by the Parrot archive maintainer, and not by the mirror servers, ensuring direct and secure developer-to-user chain of trust.","title":"Security measures"},{"location":"mirror-list/#configuration-and-custom-setup","text":"The APT package manager uses /etc/apt/sources.list and any .list file found in the /etc/apt/sources.list.d/ directory. NOTE:","title":"Configuration and custom setup"},{"location":"mirror-list/#content-of-etcaptsourceslistdparrotlist","text":"deb http://deb.parrotsec.org/parrot stable main contrib non-free #deb-src http://deb.parrotsec.org/parrot stable main contrib non-free","title":"Content of /etc/apt/sources.list.d/parrot.list:"},{"location":"mirror-list/#other-mirrors-for-manual-configuration","text":"","title":"Other mirrors for manual configuration"},{"location":"mirror-list/#ncsa","text":"North Central and South Americas Location Mirror ID bandwidth Provider Name URL APT config string Massachussetts MIT 1 Gbps SIPB MIT mirrors.mit.edu/parrot deb http://mirrors.mit.edu/parrot/ parrot main contrib non-free New York Clarkson 1 Gbps Clarkson University mirror.clarkson.edu/parrot deb https://mirror.clarkson.edu/parrot/ parrot main contrib non-free California Berkeley 1 Gbps Berkeley Open Computing Facility mirrors.ocf.berkeley.edu/parrot deb https://mirrors.ocf.berkeley.edu/parrot/ parrot main contrib non-free Oregon Osuosl 1 Gbps Oregon State University - Open Source Lab ftp.osuosl.org/pub/parrotos deb https://ftp.osuosl.org/pub/parrotos parrot main contrib non-free Location Mirror ID bandwidth Provider Name URL APT config string Ecuador CEDIA 100 Mbps RED CEDIA (National research and education center of Ecuador) mirror.cedia.org.ec/parrot deb https://mirror.cedia.org.ec/parrot/ parrot main contrib non-free Ecuador UTA 100 Mbps UTA (Universidad T\u00e9cnica de ambato) mirror.uta.edu.ec/parrot deb https://mirror.uta.edu.ec/parrot/parrot main contrib non-free Brazil USP 1 Gbps University of Sao Paulo sft.if.usp.br/parrot deb http://sft.if.usp.br/parrot/ main contrib non-free Ecuador UEB 100 Mbps UEB (Universidad Estatal de Bolivar) mirror.ueb.edu.ec/parrot deb https://mirror.ueb.edu.ec/parrot/ parrot main contrib non-free","title":"NCSA"},{"location":"mirror-list/#emea","text":"Europe Middle East and Asia Location Mirror ID bandwidth Provider Name URL APT config string Italy GARR 10 Gbps GARR Consortium (Italian Research Education Network) parrot.mirror.garr.it/mirrors/parrot deb https://parrot.mirror.garr.it/mirrors/parrot/ parrot main contrib non-free Germany Halifax 20 Gbps RWTH-Aachen (Halifax students group) ftp.halifax.rwth-aachen.de/parrotsec deb https://ftp.halifax.rwth-aachen.de/parrotsec/ parrot main contrib non-free Germany Esslingen 10 Gbps Esslingen (University of Applied Sciences) ftp-stud.hs-esslingen.de/pub/Mirrors/archive.parrotsec.org deb https://ftp-stud.hs-esslingen.de/pub/Mirrors/archive.parrotsec.org/ parrot main contrib non-free Netherland NLUUG 10 Gbps Nluug ftp.nluug.nl/os/Linux/distr/parrot deb https://ftp.nluug.nl/os/Linux/distr/parrot/ parrot main contrib non-free Sweden UMU 20 Gbps ACC UMU (Academic Computer Club, Umea University) ftp.acc.umu.se/mirror/parrotsec.org/parrot deb https://ftp.acc.umu.se/mirror/parrotsec.org/parrot/ parrot main contrib non-free Greece UOC 1 Gbps UoC (University of Crete - Computer Center) ftp.cc.uoc.gr/mirrors/linux/parrot deb https://ftp.cc.uoc.gr/mirrors/linux/parrot/ parrot main contrib non-free Belgium Belnet 10 Gbps Belnet (The Belgian National Research) ftp.belnet.be/archive.parrotsec.org deb http://ftp.belnet.be/mirror/archive.parrotsec.org/ parrot main contrib non-free Spain Osluz 1 Gbps Osluz (Oficina de software libre de la Universidad de Zaragoza) matojo.unizar.es/parrot deb http://matojo.unizar.es/parrot/ parrot main contrib non-free Portugal UP 1 Gbps U.Porto (University of Porto) mirrors.up.pt/parrot deb https://mirrors.up.pt/parrot/ parrot main contrib non-free Denmark Dotsrc 10 Gbps Dotsrc (Aalborg university) mirrors.dotsrc.org/parrot deb https://mirrors.dotsrc.org/parrot/ parrot main contrib non-free Hungary quantum-mirror 200Mbps quantum-mirror.hu quantum-mirror.hu/mirrors/pub/parrot deb https://quantum-mirror.hu/mirrors/pub/parrot parrot main contrib non-free Turkey EB 100 Mbps EB turkey.archive.parrotsec.org/parrot deb http://turkey.archive.parrotsec.org/parrot/ parrot main contrib non-free Russia Yandex 1 Gbps Yandex mirror.yandex.ru/mirrors/parrot deb https://mirror.yandex.ru/mirrors/parrot/ parrot main contrib non-free Russia Truenetwork 10 Gbps Truenetwork mirror.truenetwork.ru/parrot deb https://mirror.truenetwork.ru/parrot/ parrot main contrib non-free Iran ASIS 1 Gbps ASIS parrot.asis.io deb http://parrot.asis.io/ parrot main contrib non-free","title":"EMEA"},{"location":"mirror-list/#apac","text":"Asia and Pacific Location Mirror ID bandwidth Provider Name URL APT config string Bangladesh Amberit 1 Gbps Amberit (formerly Dhakacom) mirror.amberit.com.bd/parrotsec deb http://mirror.amberit.com.bd/parrotsec/ parrot main contrib non-free Taiwan NCHC 20 Gbps NCHC (Free Software Lab) free.nchc.org.tw/parrot deb http://free.nchc.org.tw/parrot/ parrot main contrib non-free Singapore 0x 10 Gbps 0x mirror.0x.sg/parrot deb https://mirror.0x.sg/parrot/ parrot main contrib non-free China USTC 1Gbps CMCC 1Gbps Cernet 300Mbps ChinaNet University of Science and Technology of China and USTCLUG mirrors.ustc.edu.cn/parrot deb http://mirrors.ustc.edu.cn/parrot parrot main contrib non-free China TUNA 2 Gbps TUNA (Tsinghua university of Beijing, TUNA association) mirrors.tuna.tsinghua.edu.cn/parrot deb https://mirrors.tuna.tsinghua.edu.cn/parrot/ parrot main contrib non-free China SHU 2 Gbps SHU(Shanghai University) mirrors.shu.edu.cn/parrot deb https://mirrors.shu.edu.cn/parrot/ parrot main contrib non-free China SJTUG 2 Gbps SJTUG (SJTU *NIX User Group) mirrors.sjtug.sjtu.edu.cn/parrot deb https://mirrors.sjtug.sjtu.edu.cn/parrot/ parrot main contrib non-free New Caledonia Lagoon 1 Gbps Lagoon Networks mirror.lagoon.nc/pub/parrot deb http://mirror.lagoon.nc/pub/parrot/ parrot main contrib non-free Thailand KKU 1 Gbps KKU (Khon Kaen University) mirror.kku.ac.th/parrot deb https://mirror.kku.ac.th/parrot/ parrot main contrib non-free Indonesia Datautama 1 Gbps Datautama (PT. Data Utama Dinamika) kartolo.sby.datautama.net.id/parrot deb http://kartolo.sby.datautama.net.id/parrot/ parrot main contrib non-free","title":"APAC"},{"location":"mirror-list/#make-your-own-mirror","text":"You can set up a Parrot archive mirror on your server for personal or public usage by following the steps below.","title":"Make your own mirror"},{"location":"mirror-list/#make-sure-to-have-enough-free-space","text":"You can sync the entire repository or pick just the ISO images. Make sure to have enough free space to host a mirror, and be ready for future upgrades as the archive size fluctuates. The current archive size is available here archive.parrotsec.org/parrot/misc/archive-size.txt","title":"Make sure to have enough free space"},{"location":"mirror-list/#choose-the-upstream-server","text":"We handle several domains for repository syncing services, we suggest to use archive.parrotsec.org for automatic and failproof setups, but upstream settings can be adjusted in case of specific needs. Feel free to contact the Parrot team if you have specific mirroring needs or bandwidth limitations. We can provide you dedicated upstream sources or professional support for your mirror. Main Mirror Director: archive.parrotsec.org Global Zones: EMEA: emea.archive.parrotsec.org NCSA: ncsa.archive.parrotsec.org APAC: apac.archive.parrotsec.org Individual Masters: archive1 france: archive1.parrotsec.org archive2 canada: archive2.parrotsec.org archive3 france: archive3.parrotsec.org archive4 poland: archive4.parrotsec.org Single archives may be unavailable or replaced form time to time. archive.parrotsec.org is automatically balanced between all the available mirrors and will give you zero downtimes.","title":"Choose the upstream server"},{"location":"mirror-list/#download-the-archive","text":"If you sync the entire archive with the below instructions, you do NOT need to synchronize the ISO archive. ISO files are included by default!","title":"Download the archive"},{"location":"mirror-list/#sync-the-repository","text":"rsync -Pahv --delete-after rsync://archive.parrotsec.org:/parrot-iso /var/www/html/parrot","title":"Sync the repository"},{"location":"mirror-list/#configure-a-cronjob","text":"launch the following command: crontab -e and add the following content to the crontab file: */10 * * * * flock -xn /tmp/parrot-rsync.lock -c 'rsync -aq --delete-after rsync://archive.parrotsec.org:/parrot-iso /var/www/html/parrot'","title":"Configure a cronjob"},{"location":"mirror-list/#download-the-iso-archive-only","text":"Do not sync the ISO archive if you are already synchronizing the full archive with the above instructions. ISO files are already provided with the instructions in the precedent paragraph. use the following instructions if you want to sync only the ISO files.","title":"Download the ISO archive only"},{"location":"mirror-list/#sync-the-repository_1","text":"rsync -Pahv --delete-after rsync://archive.parrotsec.org:/parrot-iso /var/www/html/parrot","title":"Sync the repository"},{"location":"mirror-list/#configure-a-cronjob_1","text":"launch the following command: crontab -e and add the following content to the crontab file: 30 2 * * * flock -xn /tmp/parrot-rsync.lock -c 'rsync -aq --delete-after rsync://archive.parrotsec.org:/parrot /var/www/html/parrot-iso'","title":"Configure a cronjob"},{"location":"mirror-list/#expose-your-mirror-via-rsync","text":"Your mirror can be exposed via rsync to allow other people to sync from you and to allow our mirror director to periodically scan your mirror and perform indexing and health checks. Rsync exposure is mandatory to add your mirror to our official list. The following instructions will set up rsync and expose the parrot archive in compliance with our standards on a debian/ubuntu server. Minor adjustments are required for other non-apt systems. install rsync with: sudo apt install rsync edit /etc/rsyncd.conf with nano: sudo nano /etc/rsyncd.conf paste the following settings in the config file and save it: [parrot] comment = Parrot OS - full archive [archive.parrotsec.org/parrot] path = /var/www/html/parrot/ hosts allow = * #hosts deny = * list=true uid=www-data gid=www-data read only = yes use chroot=yes dont compress # for better performance [parrot-iso] comment = Parrot OS - ISO files only [archive.parrotsec.org/parrot-iso] path = /var/www/html/parrot/ exclude = pool dists hosts allow = * list=true uid=www-data gid=www-data read only = yes use chroot=yes dont compress Enable the rsync service: sudo systemctl enable rsync Start the rsync service: sudo service rsync start","title":"Expose your mirror via rsync"},{"location":"mirror-list/#make-your-mirror-official","text":"If you want your mirror to be added to our official mirrors list and to our mirror directors, contact us with the following email: team AT parrotsec DOT org have fun :)","title":"Make your mirror official"},{"location":"partners/","text":"Collaborations Caine We have an open collaboration channel with Nanni Bassetti, developer of Caine, a GNU/Linux distribution focused on digital forensics. The collaboration consists in a friendly partnership where we help Caine in its development and testing process and Caine helps us with our digital forensics section. Dasaweb Dasaweb is a hosting provider that collaborate with us and sponsors our Parrot Cloud project by selling Virtual Private Servers with Parrot Cloud pre-installed. Dasaweb is also the main sponsor of most of the Parrot Community events in Italy. KNXSecurity KNXSecurity is an Italian community dedicated to cyber security training that helps us by testing the beta images of Parrot before the final release. The Free Circle GLUG TheFreeCircle is the Italian GNU/Linux user group of Palermo and Sicily that helped many times the local Parrot Community and Parrot Developers Team to organize events and meetings. FSecurity Academy Emerging learning resource in Costa Rica that makes use of the Parrot system. About FSecurity Academy Mirrors MIT SIPB MIT (Student Information Processing Board, Massachussetts Institute of Technology) Clarkson Clarkson University - New York Berkeley Berkeley Open Computing Facility - California GARR GARR Consortium - Italy RWTH-Aachen RWTH-Aachen (Halifax students group) - Germany Nluug Nluug - Netherlands Onet Onet Datacenter - Poland UMU ACC UMU (Academic Computer Club, Umea University) - Sweden Heanet Heanet - Ireland Esslingen Esslingen (University of Applied Sciences) - Germany UoC UoC (University of Crete - Computer Center) - Greece Belnet The Belgian National Research Network UP University of Porto - Portugal Aalborg Dotsrc Dotsrc - Aalborg University - Denmark CEDIA RED CEDIA (National research and education center of Ecuador) UTA UTA (Universidad T\u00e9cnica de ambato) - Ecuador UEB UEB (Universidad Estatal de Bolivar) - Ecuador Espoch ESPOCH (Escuela Superior Politecnica de Chimborazo) This mirror is no longer available, but we want to dedicate a big \u201cThank you\u201d to the ESPOCH mirror maintainers. Yandex Yandex - Russia Amberit Amberit - Bangladesh NCHC NCHC (Free Software Lab) - Taiwan USTC USTC (University of Science and Technology of China and USTCLUG) TUNA TUNA (Tsinghua university of Beijing, TUNA association) - China ASIS ASIS - Iran Lagoon Lagoon - New Caledonia KKU Khon Kaen University - Thailand OSLUZ Oficina Software Libre Universidad de Zaragoza - University of Zaragoza SHUOSC Shanghai University Open Source Community - China EB Eczac\u0131ba\u015f\u0131 Bili\u015fim - Turkey TrueNetwork TrueNetwork - Russia Quantum Mirror Quantum-mirror - Open source mirroring solutions in Hungary","title":"Project Partners"},{"location":"partners/#collaborations","text":"","title":"Collaborations"},{"location":"partners/#caine","text":"We have an open collaboration channel with Nanni Bassetti, developer of Caine, a GNU/Linux distribution focused on digital forensics. The collaboration consists in a friendly partnership where we help Caine in its development and testing process and Caine helps us with our digital forensics section.","title":"Caine"},{"location":"partners/#dasaweb","text":"Dasaweb is a hosting provider that collaborate with us and sponsors our Parrot Cloud project by selling Virtual Private Servers with Parrot Cloud pre-installed. Dasaweb is also the main sponsor of most of the Parrot Community events in Italy.","title":"Dasaweb"},{"location":"partners/#knxsecurity","text":"KNXSecurity is an Italian community dedicated to cyber security training that helps us by testing the beta images of Parrot before the final release.","title":"KNXSecurity"},{"location":"partners/#the-free-circle-glug","text":"TheFreeCircle is the Italian GNU/Linux user group of Palermo and Sicily that helped many times the local Parrot Community and Parrot Developers Team to organize events and meetings.","title":"The Free Circle GLUG"},{"location":"partners/#fsecurity-academy","text":"Emerging learning resource in Costa Rica that makes use of the Parrot system. About FSecurity Academy","title":"FSecurity Academy"},{"location":"partners/#mirrors","text":"","title":"Mirrors"},{"location":"partners/#mit","text":"SIPB MIT (Student Information Processing Board, Massachussetts Institute of Technology)","title":"MIT"},{"location":"partners/#clarkson","text":"Clarkson University - New York","title":"Clarkson"},{"location":"partners/#berkeley","text":"Berkeley Open Computing Facility - California","title":"Berkeley"},{"location":"partners/#garr","text":"GARR Consortium - Italy","title":"GARR"},{"location":"partners/#rwth-aachen","text":"RWTH-Aachen (Halifax students group) - Germany","title":"RWTH-Aachen"},{"location":"partners/#nluug","text":"Nluug - Netherlands","title":"Nluug"},{"location":"partners/#onet","text":"Onet Datacenter - Poland","title":"Onet"},{"location":"partners/#umu","text":"ACC UMU (Academic Computer Club, Umea University) - Sweden","title":"UMU"},{"location":"partners/#heanet","text":"Heanet - Ireland","title":"Heanet"},{"location":"partners/#esslingen","text":"Esslingen (University of Applied Sciences) - Germany","title":"Esslingen"},{"location":"partners/#uoc","text":"UoC (University of Crete - Computer Center) - Greece","title":"UoC"},{"location":"partners/#belnet","text":"The Belgian National Research Network","title":"Belnet"},{"location":"partners/#up","text":"University of Porto - Portugal","title":"UP"},{"location":"partners/#aalborg-dotsrc","text":"Dotsrc - Aalborg University - Denmark","title":"Aalborg Dotsrc"},{"location":"partners/#cedia","text":"RED CEDIA (National research and education center of Ecuador)","title":"CEDIA"},{"location":"partners/#uta","text":"UTA (Universidad T\u00e9cnica de ambato) - Ecuador","title":"UTA"},{"location":"partners/#ueb","text":"UEB (Universidad Estatal de Bolivar) - Ecuador","title":"UEB"},{"location":"partners/#espoch","text":"ESPOCH (Escuela Superior Politecnica de Chimborazo) This mirror is no longer available, but we want to dedicate a big \u201cThank you\u201d to the ESPOCH mirror maintainers.","title":"Espoch"},{"location":"partners/#yandex","text":"Yandex - Russia","title":"Yandex"},{"location":"partners/#amberit","text":"Amberit - Bangladesh","title":"Amberit"},{"location":"partners/#nchc","text":"NCHC (Free Software Lab) - Taiwan","title":"NCHC"},{"location":"partners/#ustc","text":"USTC (University of Science and Technology of China and USTCLUG)","title":"USTC"},{"location":"partners/#tuna","text":"TUNA (Tsinghua university of Beijing, TUNA association) - China","title":"TUNA"},{"location":"partners/#asis","text":"ASIS - Iran","title":"ASIS"},{"location":"partners/#lagoon","text":"Lagoon - New Caledonia","title":"Lagoon"},{"location":"partners/#kku","text":"Khon Kaen University - Thailand","title":"KKU"},{"location":"partners/#osluz","text":"Oficina Software Libre Universidad de Zaragoza - University of Zaragoza","title":"OSLUZ"},{"location":"partners/#shuosc","text":"Shanghai University Open Source Community - China","title":"SHUOSC"},{"location":"partners/#eb","text":"Eczac\u0131ba\u015f\u0131 Bili\u015fim - Turkey","title":"EB"},{"location":"partners/#truenetwork","text":"TrueNetwork - Russia","title":"TrueNetwork"},{"location":"partners/#quantum-mirror","text":"Quantum-mirror - Open source mirroring solutions in Hungary","title":"Quantum Mirror"},{"location":"team/","text":"Parrot Linux is a community-driven project. In this page we list people who gave a significant contribution to the project. Core Team nickname full name role(s) email palinuro Lorenzo Faletra Team Leader Core Dev Sysadmin Repository Maintainer palinuro at parrotsec dot org sheireen Lisetta Ferrero Core Dev sheireen at parrotsec dot org mibofra Francesco Bonanno ARM release dev Sysadmin mibofra at parrotsec dot org nikksno Nicolas North Sysadmin legal shit nz at os dot vu marafed Federica Maras\u00e0 Graphic Designer marafed at parrotsec dot org Contributors nickname full name role(s) email mastrobirraio Pino Matranga Website contributor Tiago Teixeira Andrea Costa Website contributor Tissy Irene Pirrotta Former Package Manager tissy at parrotsec dot org Quietwalker Manuel Di Vita Former free software licensing consultant Ambassadors / Community Managers nickname full name role(s) email meu M. Emrah \u00dcns\u00fcr Community manager / Turkish community meu at parrotsec dot org gnugr Vangelis Mouhtsis Debian/MATE Greek community gnugr at parrotsec dot org terabreik Jose Gatica Spanish Community josegatica at parrotsec dot org nemo Sandipan Roy Indian community nemo at parrotsec dot org Special Thanks Name Nanni Bassetti (Caine) Darix Deros (KNXSecurity) Giancarlo Niccolai Nathaniel Jones John Draper (cap'n crunch)","title":"The Parrot Team"},{"location":"team/#core-team","text":"nickname full name role(s) email palinuro Lorenzo Faletra Team Leader Core Dev Sysadmin Repository Maintainer palinuro at parrotsec dot org sheireen Lisetta Ferrero Core Dev sheireen at parrotsec dot org mibofra Francesco Bonanno ARM release dev Sysadmin mibofra at parrotsec dot org nikksno Nicolas North Sysadmin legal shit nz at os dot vu marafed Federica Maras\u00e0 Graphic Designer marafed at parrotsec dot org","title":"Core Team"},{"location":"team/#contributors","text":"nickname full name role(s) email mastrobirraio Pino Matranga Website contributor Tiago Teixeira Andrea Costa Website contributor Tissy Irene Pirrotta Former Package Manager tissy at parrotsec dot org Quietwalker Manuel Di Vita Former free software licensing consultant","title":"Contributors"},{"location":"team/#ambassadors-community-managers","text":"nickname full name role(s) email meu M. Emrah \u00dcns\u00fcr Community manager / Turkish community meu at parrotsec dot org gnugr Vangelis Mouhtsis Debian/MATE Greek community gnugr at parrotsec dot org terabreik Jose Gatica Spanish Community josegatica at parrotsec dot org nemo Sandipan Roy Indian community nemo at parrotsec dot org","title":"Ambassadors / Community Managers"},{"location":"team/#special-thanks","text":"Name Nanni Bassetti (Caine) Darix Deros (KNXSecurity) Giancarlo Niccolai Nathaniel Jones John Draper (cap'n crunch)","title":"Special Thanks"},{"location":"warrant-canary/","text":"Warrant Canary This page is to inform users that the Parrot Linux has not been served with a secret government subpoena in its servers (ParrotProject/Frozenbox infrastructure), its software (Parrot OS and its official derivatives), or its services (XMPP chat services, community service, gitlab service, email service, CDN service). If a warrant canary has not been updated in the time period specified by Parrot Linux, or if this page disappears, users are to assume that Parrot Linux has indeed been served with a secret subpoena. The intention is to allow Parrot Linux to warn users of the existence of a subpoena passively, without disclosing to others that the government has sought or obtained access to information or records under a secret subpoena. Warrant canaries have been found to be legal by the United States Justice Department, so long as they are passive in their notifications. Warrant Canary, January 4th 2019","title":"Warrant Canary"},{"location":"warrant-canary/#warrant-canary","text":"This page is to inform users that the Parrot Linux has not been served with a secret government subpoena in its servers (ParrotProject/Frozenbox infrastructure), its software (Parrot OS and its official derivatives), or its services (XMPP chat services, community service, gitlab service, email service, CDN service). If a warrant canary has not been updated in the time period specified by Parrot Linux, or if this page disappears, users are to assume that Parrot Linux has indeed been served with a secret subpoena. The intention is to allow Parrot Linux to warn users of the existence of a subpoena passively, without disclosing to others that the government has sought or obtained access to information or records under a secret subpoena. Warrant canaries have been found to be legal by the United States Justice Department, so long as they are passive in their notifications. Warrant Canary, January 4th 2019","title":"Warrant Canary"},{"location":"weathermap/","text":".col-md-9 { height: 80vh; } .col-md-3 { visibility: hidden; } var mymap = L.map('mapid').setView([20, 0], 3); var icondc = L.icon({ iconUrl: '../img/icon-dc.png', iconSize: [60, 60], }); var iconserver = L.icon({ iconUrl: '../img/icon-server.png', iconSize: [40, 40], }); var iconmirror = L.icon({ iconUrl: '../img/icon-mirror.png', iconSize: [40, 40], }); // master node2 var master = L.marker([52.237049, 21.017532], {title: 'Master Node', icon: icondc}).addTo(mymap) .bindTooltip('Master Node', {permanent: false, opacity: 0.8}) .bindPopup(\"<b>Parrot Master Node 1</b><br>primary datastore<br>websites<br>git server<br>mail server<br>community portal<br>mirror director\"); // master gimli var master = L.marker([38.1320500, 13.3356100], {title: 'Master Node', icon: icondc}).addTo(mymap) .bindTooltip('Master Node', {permanent: false, opacity: 0.8}) .bindPopup(\"<b>Parrot Master Node 2</b><br>backup datastore<br>build platform<br>test platform<br>mirror director<br>failover services\"); // arezzo var master = L.marker([43.416698, 11.883300], {title: 'CDN Edge', icon: iconserver}).addTo(mymap) .bindTooltip('3', {permanent: true, opacity: 0.8, direction: 'top'}) .bindPopup(\"<b>CDN Edge Servers:</b><br>arezzo1.it.emea.parrotsec.org<br>arezzo2.it.emea.parrotsec.org<br>arezzo3.it.emea.parrotsec.org\"); // frankfurt var master = L.marker([50.110924, 8.682127], {title: 'CDN Edge', icon: iconserver}).addTo(mymap) .bindTooltip('2', {permanent: true, opacity: 0.8, direction: 'top'}) .bindPopup(\"<b>CDN Edge Servers:</b><br>frankfurt1.de.emea.parrotsec.org<br>frankfurt2.de.emea.parrotsec.org\"); // london var master = L.marker([51.514198, -0.093100], {title: 'CDN Edge', icon: iconserver}).addTo(mymap) .bindTooltip('1', {permanent: true, opacity: 0.8, direction: 'top'}) .bindPopup(\"<b>CDN Edge Servers:</b><br>london1.uk.emea.parrotsec.org\"); // newyork var master = L.marker([40.7142700, -74.0059700], {title: 'CDN Edge', icon: iconserver}).addTo(mymap) .bindTooltip('2', {permanent: true, opacity: 0.8, direction: 'top'}) .bindPopup(\"<b>CDN Edge Servers:</b><br>newyork1.us.ncsa.parrotsec.org<br>newyork2.us.ncsa.parrotsec.org\"); //sanfrancisco var master = L.marker([37.3382082, -121.8863286], {title: 'CDN Edge', icon: iconserver}).addTo(mymap) .bindTooltip('2', {permanent: true, opacity: 0.8, direction: 'top'}) .bindPopup(\"<b>CDN Edge Servers:</b><br>sanfrancisco1.us.ncsa.parrotsec.org<br>sanfrancisco2.us.ncsa.parrotsec.org\"); // toronto var master = L.marker([43.655499, -79.362602], {title: 'CDN Edge', icon: iconserver}).addTo(mymap) .bindTooltip('1', {permanent: true, opacity: 0.8, direction: 'top'}) .bindPopup(\"<b>CDN Edge Servers:</b><br>toronto1.ca.ncsa.parrotsec.org\"); // tokyo var master = L.marker([35.583302, 139.748199], {title: 'CDN Edge', icon: iconserver}).addTo(mymap) .bindTooltip('1', {permanent: true, opacity: 0.8, direction: 'top'}) .bindPopup(\"<b>CDN Edge Servers:</b><br>tokyo1.jp.apac.parrotsec.org\"); // singapore var master = L.marker([1.290117, 103.64974], {title: 'CDN Edge', icon: iconserver}).addTo(mymap) .bindTooltip('1', {permanent: true, opacity: 0.8, direction: 'top'}) .bindPopup(\"<b>CDN Edge Servers:</b><br>singapore1.sg.apac.parrotsec.org\"); // bangalore var master = L.marker([12.983200, 77.583298], {title: 'CDN Edge', icon: iconserver}).addTo(mymap) .bindTooltip('1', {permanent: true, opacity: 0.8, direction: 'top'}) .bindPopup(\"<b>CDN Edge Servers:</b><br>bangalore1.in.apac.parrotsec.org\"); // sydney var master = L.marker([-33.861198, 151.198196], {title: 'CDN Edge', icon: iconserver}).addTo(mymap) .bindTooltip('1', {permanent: true, opacity: 0.8, direction: 'top'}) .bindPopup(\"<b>CDN Edge Servers:</b><br>sydney1.au.apac.parrotsec.org\"); // mirror umu var master = L.marker([59.3247, 18.056], {title: 'Mirror Server', icon: iconmirror}).addTo(mymap) .bindTooltip('mirror server', {permanent: false, opacity: 0.8, direction: 'top'}) .bindPopup('<b>Download Mirror Server:</b><br>ACC UMU (Academic Computer Club, Umea University)<br><a href=\"http://ftp.acc.umu.se/mirror/parrotsec.org/parrot/\">http://ftp.acc.umu.se/mirror/parrotsec.org/parrot/</a>'); // mirror uoc var master = L.marker([35.325, 25.1306], {title: 'Mirror Server', icon: iconmirror}).addTo(mymap) .bindTooltip('mirror server', {permanent: false, opacity: 0.8, direction: 'top'}) .bindPopup('<b>Download Mirror Server:</b><br>University of Crete<br><a href=\"http://http://ftp.cc.uoc.gr/mirrors/linux/parrot/\">http://ftp.cc.uoc.gr/mirrors/linux/parrot/</a>'); // mirror garr var master = L.marker([41.1114800, 16.8554000], {title: 'Mirror Server', icon: iconmirror}).addTo(mymap) .bindTooltip('mirror server', {permanent: false, opacity: 0.8, direction: 'top'}) .bindPopup('<b>Download Mirror Server:</b><br>GARR Consortium<br><a href=\"http://parrot.mirror.garr.it/mirrors/parrot/\">http://parrot.mirror.garr.it/mirrors/parrot/</a>'); // mirror dotsrc var master = L.marker([55.8396, 12.069], {title: 'Mirror Server', icon: iconmirror}).addTo(mymap) .bindTooltip('mirror server', {permanent: false, opacity: 0.8, direction: 'top'}) .bindPopup('<b>Download Mirror Server:</b><br>Dotsrc (Aalborg University)<br><a href=\"http://mirrors.dotsrc.org/parrot/\">http://mirrors.dotsrc.org/parrot/</a>'); // mirror eb var master = L.marker([41.0214, 28.9948], {title: 'Mirror Server', icon: iconmirror}).addTo(mymap) .bindTooltip('mirror server', {permanent: false, opacity: 0.8, direction: 'top'}) .bindPopup('<b>Download Mirror Server:</b><br>Eczacibasi Bilisim San.ve Tic.<br><a href=\"http://turkey.archive.parrotsec.org/parrot/\">http://turkey.archive.parrotsec.org/parrot/</a>'); // mirror nluug var master = L.marker([52.3824, 4.8995], {title: 'Mirror Server', icon: iconmirror}).addTo(mymap) .bindTooltip('mirror server', {permanent: false, opacity: 0.8, direction: 'top'}) .bindPopup('<b>Download Mirror Server:</b><br>The Netherlands Local Unix User Group<br><a href=\"http://ftp.nluug.nl/os/Linux/distr/parrot/\">http://ftp.nluug.nl/os/Linux/distr/parrot/</a>'); // mirror halifax var master = L.marker([50.776, 6.0872], {title: 'Mirror Server', icon: iconmirror}).addTo(mymap) .bindTooltip('mirror server', {permanent: false, opacity: 0.8, direction: 'top'}) .bindPopup('<b>Download Mirror Server:</b><br>RWTH-Aachen (Halifax Students Group)<br><a href=\"http://ftp.halifax.rwth-aachen.de/parrotsec/\">http://ftp.halifax.rwth-aachen.de/parrotsec/</a>'); // mirror esslingen var master = L.marker([48.7667, 9.1833], {title: 'Mirror Server', icon: iconmirror}).addTo(mymap) .bindTooltip('mirror server', {permanent: false, opacity: 0.8, direction: 'top'}) .bindPopup('<b>Download Mirror Server:</b><br>Esslingen (University of Applied Sciences)<br><a href=\"http://ftp-stud.hs-esslingen.de/pub/Mirrors/archive.parrotsec.org/\">http://ftp-stud.hs-esslingen.de/pub/Mirrors/archive.parrotsec.org/</a>'); // mirror up var master = L.marker([41.1496, -8.611], {title: 'Mirror Server', icon: iconmirror}).addTo(mymap) .bindTooltip('mirror server', {permanent: false, opacity: 0.8, direction: 'top'}) .bindPopup('<b>Download Mirror Server:</b><br>University of Porto<br><a href=\"http://mirrors.up.pt/parrot/\">http://mirrors.up.pt/parrot/</a>'); // mirror osluz var master = L.marker([41.6561, -0.8773], {title: 'Mirror Server', icon: iconmirror}).addTo(mymap) .bindTooltip('mirror server', {permanent: false, opacity: 0.8, direction: 'top'}) .bindPopup('<b>Download Mirror Server:</b><br>Osluz (Oficina de software libre de la Universidad de Zaragoza)<br><a href=\"http://matojo.unizar.es/parrot/\">http://matojo.unizar.es/parrot/</a>'); // mirror belnet var master = L.marker([50.85, 4.35], {title: 'Mirror Server', icon: iconmirror}).addTo(mymap) .bindTooltip('mirror server', {permanent: false, opacity: 0.8, direction: 'top'}) .bindPopup('<b>Download Mirror Server:</b><br>Belgian National Research network<br><a href=\"http://ftp.belnet.be/archive.parrotsec.org/\">http://ftp.belnet.be/archive.parrotsec.org/</a>'); // mirror asis var master = L.marker([35.69, 51.42], {title: 'Mirror Server', icon: iconmirror}).addTo(mymap) .bindTooltip('mirror server', {permanent: false, opacity: 0.8, direction: 'top'}) .bindPopup('<b>Download Mirror Server:</b><br>ASIS<br><a href=\"http://parrot.asis.io/\">http://parrot.asis.io/</a>'); // mirror mit var master = L.marker([42.3647, -71.1042], {title: 'Mirror Server', icon: iconmirror}).addTo(mymap) .bindTooltip('mirror server', {permanent: false, opacity: 0.8, direction: 'top'}) .bindPopup('<b>Download Mirror Server:</b><br>SIPB MIT<br><a href=\"http://mirrors.mit.edu/parrot/\">http://mirrors.mit.edu/parrot/</a>'); // mirror clarkson var master = L.marker([44.6592, -74.9681], {title: 'Mirror Server', icon: iconmirror}).addTo(mymap) .bindTooltip('mirror server', {permanent: false, opacity: 0.8, direction: 'top'}) .bindPopup('<b>Download Mirror Server:</b><br>Clarkson University<br><a href=\"http://mirror.clarkson.edu/parrot/\">http://mirror.clarkson.edu/parrot/</a>'); // mirror osusol var master = L.marker([40.7143, -74.006], {title: 'Mirror Server', icon: iconmirror}).addTo(mymap) .bindTooltip('mirror server', {permanent: false, opacity: 0.8, direction: 'top'}) .bindPopup('<b>Download Mirror Server:</b><br>Oregon State University - Open Source Lab<br><a href=\"http://ftp.osuosl.org/pub/parrotos/\">http://ftp.osuosl.org/pub/parrotos/</a>'); // mirror berkeley var master = L.marker([37.8718992, -122.2585399], {title: 'Mirror Server', icon: iconmirror}).addTo(mymap) .bindTooltip('mirror server', {permanent: false, opacity: 0.8, direction: 'top'}) .bindPopup('<b>Download Mirror Server:</b><br>Berkeley Open Computing Facility<br><a href=\"http://mirrors.ocf.berkeley.edu/parrot/\">http://mirrors.ocf.berkeley.edu/parrot/</a>'); // mirror cedia var master = L.marker([-2.9005499, -79.0045319], {title: 'Mirror Server', icon: iconmirror}).addTo(mymap) .bindTooltip('mirror server', {permanent: false, opacity: 0.8, direction: 'top'}) .bindPopup('<b>Download Mirror Server:</b><br>RED CEDIA (National research and education center of Ecuador)<br><a href=\"http://mirror.cedia.org.ec/parrot/\">http://mirror.cedia.org.ec/parrot/</a>'); // mirror usp var master = L.marker([-23.627, -46.635], {title: 'Mirror Server', icon: iconmirror}).addTo(mymap) .bindTooltip('mirror server', {permanent: false, opacity: 0.8, direction: 'top'}) .bindPopup('<b>Download Mirror Server:</b><br>University of Sao paulo<br><a href=\"http://sft.if.usp.br/parrot/\">http://sft.if.usp.br/parrot/</a>'); // mirror uta var master = L.marker([-1.241667, -78.619720], {title: 'Mirror Server', icon: iconmirror}).addTo(mymap) .bindTooltip('mirror server', {permanent: false, opacity: 0.8, direction: 'top'}) .bindPopup('<b>Download Mirror Server:</b><br>UTA (Universidad T\u00e9cnica de ambato)<br><a href=\"http://mirror.uta.edu.ec/parrot/\">http://mirror.uta.edu.ec/parrot/</a>'); // mirror ueb var master = L.marker([-1.59263, -79.00098], {title: 'Mirror Server', icon: iconmirror}).addTo(mymap) .bindTooltip('mirror server', {permanent: false, opacity: 0.8, direction: 'top'}) .bindPopup('<b>Download Mirror Server:</b><br><br><a href=\"http://\">http://</a>'); // mirror kku var master = L.marker([16.44671, 102.833], {title: 'Mirror Server', icon: iconmirror}).addTo(mymap) .bindTooltip('mirror server', {permanent: false, opacity: 0.8, direction: 'top'}) .bindPopup('<b>Download Mirror Server:</b><br>KKU (Khon Kaen University)<br><a href=\"http://mirror.kku.ac.th/parrot/\">http://mirror.kku.ac.th/parrot/</a>'); // mirror shu var master = L.marker([31.317665396, 121.385665124], {title: 'Mirror Server', icon: iconmirror}).addTo(mymap) .bindTooltip('mirror server', {permanent: false, opacity: 0.8, direction: 'top'}) .bindPopup('<b>Download Mirror Server:</b><br>SHU(Shanghai University)<br><a href=\"http://mirrors.shu.edu.cn/parrot/\">http://mirrors.shu.edu.cn/parrot/</a>'); // mirror truenetwork var master = L.marker([55.7386, 37.6068], {title: 'Mirror Server', icon: iconmirror}).addTo(mymap) .bindTooltip('mirror server', {permanent: false, opacity: 0.8, direction: 'top'}) .bindPopup('<b>Download Mirror Server:</b><br>True Network<br><a href=\"http://mirror.truenetwork.ru/parrot/\">http://mirror.truenetwork.ru/parrot/</a>'); // mirror ustc var master = L.marker([31.8639, 117.2808], {title: 'Mirror Server', icon: iconmirror}).addTo(mymap) .bindTooltip('mirror server', {permanent: false, opacity: 0.8, direction: 'top'}) .bindPopup('<b>Download Mirror Server:</b><br>University of Science and Technology of China and USTCLUG<br><a href=\"http://mirrors.ustc.edu.cn/parrot/\">http://mirrors.ustc.edu.cn/parrot/</a>'); // mirror lagoon var master = L.marker([-21.5, 165.5], {title: 'Mirror Server', icon: iconmirror}).addTo(mymap) .bindTooltip('mirror server', {permanent: false, opacity: 0.8, direction: 'top'}) .bindPopup('<b>Download Mirror Server:</b><br>Lagoon Networks<br><a href=\"http://mirror.lagoon.nc/pub/parrot/\">http://mirror.lagoon.nc/pub/parrot/</a>'); // mirror tuna var master = L.marker([39.9288, 116.3889], {title: 'Mirror Server', icon: iconmirror}).addTo(mymap) .bindTooltip('mirror server', {permanent: false, opacity: 0.8, direction: 'top'}) .bindPopup('<b>Download Mirror Server:</b><br>TUNA (Tsinghua university of Beijing, TUNA association)<br><a href=\"http://mirrors.tuna.tsinghua.edu.cn/parrot/\">http://mirrors.tuna.tsinghua.edu.cn/parrot/</a>'); // mirror 0x var master = L.marker([1.34914, 103.96923], {title: 'Mirror Server', icon: iconmirror}).addTo(mymap) .bindTooltip('mirror server', {permanent: false, opacity: 0.8, direction: 'top'}) .bindPopup('<b>Download Mirror Server:</b><br>0x Singapore<br><a href=\"http://mirror.0x.sg/parrot/\">http://mirror.0x.sg/parrot/</a>'); // mirror amberit var master = L.marker([23.7, 90.375], {title: 'Mirror Server', icon: iconmirror}).addTo(mymap) .bindTooltip('mirror server', {permanent: false, opacity: 0.8, direction: 'top'}) .bindPopup('<b>Download Mirror Server:</b><br>Amberit (Dhakacom)<br><a href=\"http://mirror.amberit.com.bd/parrotsec/\">http://mirror.amberit.com.bd/parrotsec/</a>'); // mirror yandex var master = L.marker([56.143063, 40.410934], {title: 'Mirror Server', icon: iconmirror}).addTo(mymap) .bindTooltip('mirror server', {permanent: false, opacity: 0.8, direction: 'top'}) .bindPopup('<b>Download Mirror Server:</b><br>Yandex<br><a href=\"http://mirror.yandex.ru/mirrors/parrot/\">http://mirror.yandex.ru/mirrors/parrot/</a>'); // mirror quantum var master = L.marker([47.5, 19.0833], {title: 'Mirror Server', icon: iconmirror}).addTo(mymap) .bindTooltip('mirror server', {permanent: false, opacity: 0.8, direction: 'top'}) .bindPopup('<b>Download Mirror Server:</b><br>Quantum Mirror<br><a href=\"http://quantum-mirror.hu/mirrors/pub/parrot/\">http://quantum-mirror.hu/mirrors/pub/parrot/</a>'); // mirror nchc var master = L.marker([23.5, 121], {title: 'Mirror Server', icon: iconmirror}).addTo(mymap) .bindTooltip('mirror server', {permanent: false, opacity: 0.8, direction: 'top'}) .bindPopup('<b>Download Mirror Server:</b><br>NCHC (Free Software Lab)<br><a href=\"http://free.nchc.org.tw/parrot/\">http://free.nchc.org.tw/parrot/</a>'); // mirror sjtug var master = L.marker([31.0275000, 121.4322222], {title: 'Mirror Server', icon: iconmirror}).addTo(mymap) .bindTooltip('mirror server', {permanent: false, opacity: 0.8, direction: 'top'}) .bindPopup('<b>Download Mirror Server:</b><br>SJTUG (SJTU *NIX User Group)<br><a href=\"http://mirrors.sjtug.sjtu.edu.cn/parrot/\">http://mirrors.sjtug.sjtu.edu.cn/parrot/</a>'); L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw', { maxZoom: 10, attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' + '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' + 'Imagery \u00a9 <a href=\"https://www.mapbox.com/\">Mapbox</a>', id: 'mapbox.streets' }).addTo(mymap);","title":"Weathermap"},{"location":"dev/","text":"Developer Zone This section is dedicated to the Parrot project development. This section is under heavy development and many pages were not written or reviewed yet. Contact our dev team if you need help. Dev's to be - Edx - Linux Foundation - Debian Packaging - GNU Coding Standard Developer resources WIP Being a Parrot developer WIP The Parrot workflow Set up sbuild","title":"Developer Zone"},{"location":"dev/#developer-zone","text":"This section is dedicated to the Parrot project development. This section is under heavy development and many pages were not written or reviewed yet. Contact our dev team if you need help.","title":"Developer Zone"},{"location":"dev/#devs-to-be","text":"- Edx - Linux Foundation - Debian Packaging - GNU Coding Standard","title":"Dev's to be"},{"location":"dev/#developer-resources","text":"WIP","title":"Developer resources"},{"location":"dev/#being-a-parrot-developer","text":"WIP","title":"Being a Parrot developer"},{"location":"dev/#the-parrot-workflow","text":"Set up sbuild","title":"The Parrot workflow"},{"location":"dev/sbuild/","text":"Build deb packages with sbuild Sbuild is the official debian tool to compile and cross-compile deb packages for all the supported architectures. Setup Install the needed tools sudo apt install sbuild debhelper ubuntu-dev-tools piuparts sudo adduser $USER sbuild Optionally install and enable apt-cacher-ng (keep in mind that network packages are not started by default) sudo apt install apt-cacher-ng sudo service apt-cacher-ng start sudo systemctl enable apt-cacher-ng echo 'Acquire::http::Proxy http://127.0.0.1:3142 ;' | sudo tee /etc/apt/apt.conf.d/01acng Create the sbuild config files: Create ~/.sbuildrc: # Name to use as override in .changes files for the Maintainer: field # (mandatory, no default!). $maintainer_name='Your Name user@ubuntu.com '; # Default distribution to build. $distribution = parrot ; # Build arch-all by default. $build_arch_all = 1; # When to purge the build directory afterwards; possible values are never , # successful , and always . always is the default. It can be helpful # to preserve failing builds for debugging purposes. Switch these comments # if you want to preserve even successful builds, and then use # schroot -e --all-sessions to clean them up manually. $purge_build_directory = 'successful'; $purge_session = 'successful'; $purge_build_deps = 'successful'; # $purge_build_directory = 'never'; # $purge_session = 'never'; # $purge_build_deps = 'never'; # Directory for writing build logs to #$log_dir=$ENV{HOME}. /build/logs ; # don't remove this, Perl needs it: 1; Create ~/.mk-sbuild.rc: SCHROOT_CONF_SUFFIX= source-root-users=root,sbuild,admin source-root-groups=root,sbuild,admin preserve-environment=true # you will want to undo the below for stable releases, read `man mk-sbuild` for details # during the development cycle, these pockets are not used, but will contain important # updates after each release of Ubuntu SKIP_UPDATES= 1 SKIP_PROPOSED= 1 # if you have e.g. apt-cacher-ng around # DEBOOTSTRAP_PROXY=http://127.0.0.1:3142/ Log out and log in again in order for your group change to take effect. otherwise use the following command to enter the sbuild group without reloading your session: sg sbuild Optionally generate a GPG keypair for sbuild to use: sbuild-update --keygen Create the schroot environments Create the amd64 chroot using the btrfs backend (remove the btrfs option if /var uses a different filesystem): mk-sbuild --arch=amd64 --name=parrot --skip-proposed --skip-updates --skip-security --debootstrap-include=ca-certificates,parrot-archive-keyring,gnupg2 --debootstrap-mirror=http://127.0.0.1:3142/deb.parrotsec.org/parrot --type= btrfs-snapshot --distro= debian parrot Do the same for i386: mk-sbuild --arch=i386 --name=parrot --skip-proposed --skip-updates --skip-security --debootstrap-include=ca-certificates,parrot-archive-keyring,gnupg2 --debootstrap-mirror=http://127.0.0.1:3142/deb.parrotsec.org/parrot --type= btrfs-snapshot --distro= debian parrot Do the same for arm64: mk-sbuild --arch=arm64 --name=parrot --skip-proposed --skip-updates --skip-security --debootstrap-include=ca-certificates,parrot-archive-keyring,gnupg2 --debootstrap-mirror=http://127.0.0.1:3142/deb.parrotsec.org/parrot --type= btrfs-snapshot --distro= debian parrot Do the same for armhf: mk-sbuild --arch=armhf --name=parrot --skip-proposed --skip-updates --skip-security --debootstrap-include=ca-certificates,parrot-archive-keyring,gnupg2 --debootstrap-mirror=http://127.0.0.1:3142/deb.parrotsec.org/parrot --type= btrfs-snapshot --distro= debian parrot Additional setup (optional) You may find convenient to have some additional utilities pre-installed in your schroot environments to speed the build process up or to be able to quickly enter the environment of a failed build and spot eventual bugs. Install useful packages: sudo schroot --all-source-chroots -d / -u root -- apt-get update sudo schroot --all-source-chroots -d / -u root -- apt-get -y install nano curl wget devscripts build-essential ubuntu-dev-tools Notes BTRFS If you use btrfs, the --type=\"btrfs-snapshot\" option will handle the chroots as btrfs subvolumes for easier management, and every build will be performed on a dedicated snapshot of that subvolume that is automatically created and destroyed for each build, keeping your original chroots clean, making every build isolated and speeding up the initial bootstrap of the build process. Remove --type=\"btrfs-snapshot\" if you don't use btrfs. Boostrap failures If something went wrong during the creation of the chroot, then you have to delete its folder or snapshot before you retry. If your backend is btrfs then you can't just delete the folder in /var/lib/schroot/chroots/ because it is a btrfs subvolume. The following command is an example of how you can delete the subvolume called parrot-amd64: btrfs subvolume delete /var/lib/schroot/chroots/parrot-amd64","title":"Sbuild"},{"location":"dev/sbuild/#build-deb-packages-with-sbuild","text":"Sbuild is the official debian tool to compile and cross-compile deb packages for all the supported architectures.","title":"Build deb packages with sbuild"},{"location":"dev/sbuild/#setup","text":"Install the needed tools sudo apt install sbuild debhelper ubuntu-dev-tools piuparts sudo adduser $USER sbuild Optionally install and enable apt-cacher-ng (keep in mind that network packages are not started by default) sudo apt install apt-cacher-ng sudo service apt-cacher-ng start sudo systemctl enable apt-cacher-ng echo 'Acquire::http::Proxy http://127.0.0.1:3142 ;' | sudo tee /etc/apt/apt.conf.d/01acng Create the sbuild config files: Create ~/.sbuildrc: # Name to use as override in .changes files for the Maintainer: field # (mandatory, no default!). $maintainer_name='Your Name user@ubuntu.com '; # Default distribution to build. $distribution = parrot ; # Build arch-all by default. $build_arch_all = 1; # When to purge the build directory afterwards; possible values are never , # successful , and always . always is the default. It can be helpful # to preserve failing builds for debugging purposes. Switch these comments # if you want to preserve even successful builds, and then use # schroot -e --all-sessions to clean them up manually. $purge_build_directory = 'successful'; $purge_session = 'successful'; $purge_build_deps = 'successful'; # $purge_build_directory = 'never'; # $purge_session = 'never'; # $purge_build_deps = 'never'; # Directory for writing build logs to #$log_dir=$ENV{HOME}. /build/logs ; # don't remove this, Perl needs it: 1; Create ~/.mk-sbuild.rc: SCHROOT_CONF_SUFFIX= source-root-users=root,sbuild,admin source-root-groups=root,sbuild,admin preserve-environment=true # you will want to undo the below for stable releases, read `man mk-sbuild` for details # during the development cycle, these pockets are not used, but will contain important # updates after each release of Ubuntu SKIP_UPDATES= 1 SKIP_PROPOSED= 1 # if you have e.g. apt-cacher-ng around # DEBOOTSTRAP_PROXY=http://127.0.0.1:3142/ Log out and log in again in order for your group change to take effect. otherwise use the following command to enter the sbuild group without reloading your session: sg sbuild Optionally generate a GPG keypair for sbuild to use: sbuild-update --keygen","title":"Setup"},{"location":"dev/sbuild/#create-the-schroot-environments","text":"Create the amd64 chroot using the btrfs backend (remove the btrfs option if /var uses a different filesystem): mk-sbuild --arch=amd64 --name=parrot --skip-proposed --skip-updates --skip-security --debootstrap-include=ca-certificates,parrot-archive-keyring,gnupg2 --debootstrap-mirror=http://127.0.0.1:3142/deb.parrotsec.org/parrot --type= btrfs-snapshot --distro= debian parrot Do the same for i386: mk-sbuild --arch=i386 --name=parrot --skip-proposed --skip-updates --skip-security --debootstrap-include=ca-certificates,parrot-archive-keyring,gnupg2 --debootstrap-mirror=http://127.0.0.1:3142/deb.parrotsec.org/parrot --type= btrfs-snapshot --distro= debian parrot Do the same for arm64: mk-sbuild --arch=arm64 --name=parrot --skip-proposed --skip-updates --skip-security --debootstrap-include=ca-certificates,parrot-archive-keyring,gnupg2 --debootstrap-mirror=http://127.0.0.1:3142/deb.parrotsec.org/parrot --type= btrfs-snapshot --distro= debian parrot Do the same for armhf: mk-sbuild --arch=armhf --name=parrot --skip-proposed --skip-updates --skip-security --debootstrap-include=ca-certificates,parrot-archive-keyring,gnupg2 --debootstrap-mirror=http://127.0.0.1:3142/deb.parrotsec.org/parrot --type= btrfs-snapshot --distro= debian parrot","title":"Create the schroot environments"},{"location":"dev/sbuild/#additional-setup-optional","text":"You may find convenient to have some additional utilities pre-installed in your schroot environments to speed the build process up or to be able to quickly enter the environment of a failed build and spot eventual bugs. Install useful packages: sudo schroot --all-source-chroots -d / -u root -- apt-get update sudo schroot --all-source-chroots -d / -u root -- apt-get -y install nano curl wget devscripts build-essential ubuntu-dev-tools","title":"Additional setup (optional)"},{"location":"dev/sbuild/#notes","text":"","title":"Notes"},{"location":"dev/sbuild/#btrfs","text":"If you use btrfs, the --type=\"btrfs-snapshot\" option will handle the chroots as btrfs subvolumes for easier management, and every build will be performed on a dedicated snapshot of that subvolume that is automatically created and destroyed for each build, keeping your original chroots clean, making every build isolated and speeding up the initial bootstrap of the build process. Remove --type=\"btrfs-snapshot\" if you don't use btrfs.","title":"BTRFS"},{"location":"dev/sbuild/#boostrap-failures","text":"If something went wrong during the creation of the chroot, then you have to delete its folder or snapshot before you retry. If your backend is btrfs then you can't just delete the folder in /var/lib/schroot/chroots/ because it is a btrfs subvolume. The following command is an example of how you can delete the subvolume called parrot-amd64: btrfs subvolume delete /var/lib/schroot/chroots/parrot-amd64","title":"Boostrap failures"},{"location":"getting-started/create-boot-device/","text":"The ISO Formats ISO is a special file format that represents the content of a small storage device. The Parrot ISO file is a bit-per-bit representation of the content of a Parrot USB or DVD drive. You can use a special software like Etcher to clone the content of the Parrot ISO to a USB drive and transform such USB drive into a full Parrot USB device. How NOT to create a Parrot USB drive The Parrot ISO uses the iso9660 format (also known as isohybrid). It is a special ISO format that contains not only the partition content, but also the partition table. Some ISO writing programs do not write the iso bit-per-bit into the usb drive at a low level. They create a custom partition table and just copy the file in the USB drive in an unofficial and non-standard way. This behavior is against what the isohybrid was created for, and may break core system functionalities and make the system uninstallable from such USB drives. It is highly recommended NOT to use programs like unetbootin , or any program which not isohybrid compliant. How to create a Parrot USB drives To create a Parrot bootable device you need a USB drive of at least 4gb for the security edition or 2gb for the home edition Etcher Our official ISO Writing Tool is Etcher - www.etcher.io . It works on GNU/Linux, Mac OS and Windows, it does one thing and it does it well. We highly suggest Etcher over all other methods. DD dd (and its derivatives) is a command line tool integrated in every unix and unix-like system, and it can be used to write the ISO file into a block device bit per bit. Due to the potential to brick your system if you are not familiar with linux we recommend that you use Etcher. Previous / Next","title":"Create Boot Device"},{"location":"getting-started/create-boot-device/#the-iso-formats","text":"ISO is a special file format that represents the content of a small storage device. The Parrot ISO file is a bit-per-bit representation of the content of a Parrot USB or DVD drive. You can use a special software like Etcher to clone the content of the Parrot ISO to a USB drive and transform such USB drive into a full Parrot USB device.","title":"The ISO Formats"},{"location":"getting-started/create-boot-device/#how-not-to-create-a-parrot-usb-drive","text":"The Parrot ISO uses the iso9660 format (also known as isohybrid). It is a special ISO format that contains not only the partition content, but also the partition table. Some ISO writing programs do not write the iso bit-per-bit into the usb drive at a low level. They create a custom partition table and just copy the file in the USB drive in an unofficial and non-standard way. This behavior is against what the isohybrid was created for, and may break core system functionalities and make the system uninstallable from such USB drives. It is highly recommended NOT to use programs like unetbootin , or any program which not isohybrid compliant.","title":"How NOT to create a Parrot USB drive"},{"location":"getting-started/create-boot-device/#how-to-create-a-parrot-usb-drives","text":"To create a Parrot bootable device you need a USB drive of at least 4gb for the security edition or 2gb for the home edition","title":"How to create a Parrot USB drives"},{"location":"getting-started/create-boot-device/#etcher","text":"Our official ISO Writing Tool is Etcher - www.etcher.io . It works on GNU/Linux, Mac OS and Windows, it does one thing and it does it well. We highly suggest Etcher over all other methods.","title":"Etcher"},{"location":"getting-started/create-boot-device/#dd","text":"dd (and its derivatives) is a command line tool integrated in every unix and unix-like system, and it can be used to write the ISO file into a block device bit per bit. Due to the potential to brick your system if you are not familiar with linux we recommend that you use Etcher. Previous / Next","title":"DD"},{"location":"getting-started/download/","text":"Parrot Security Parrot Security is our complete all-in-one environment for pentesting, privacy, digital forensics, reverse engineering and software development. The system includes a full arsenal of security oriented tools to to ensure as security professional, you've got everything you need. Parrot Home Parrot Home is a special edition of Parrot designed for daily use. It's geared toward regular users who need a lightweight, always updated and beautiful system. The distribution has the same look and feel of a regular Parrot environment and includes all the basic programs for daily work. Parrot Home also includes programs to chat privately, encrypt documents with the highest cryptographic standards or surf the net in a completely anonymous and secure way. The system can also be used as a starting point to build a very customized pentesting platform with only the bare essentials, or you can use it to build your professional workstation by taking advantage of all the latest and most powerful technologies of Debian without the hassle. Netinstall Images Parrot offers netinstall images. Netinstall imges are special lightweight iso files containing only the installer. The installer is configured to partition the disk, establish an internet connection and install the system from scratch by downloading all the packages via internet. The netinstall image can be used to install only the headless Parrot Core, or it can be used to install different Desktop Environments. Docker templates Docker is a powerful containerization technology that allows the user to start multiple instances of a template and use them as isolated environments that can be destroyed and restarted in a matter of seconds. A full virtual machine usually requires more computer resources (ram, cpu time and storage), long installation and configuration times and maintenance. The purpose of Parrot for Docker is to easily offer the whole Parrot toolkit on top of every operating system supported by Docker (*NIX distributions, Mac OS and Windows) without all the negative effects of a full virtualized environment. You can fire up a Parrot container inside your existing system or using a cloud provider in just few seconds, and by using an extremely limited amount of resources (just the memory required by the individual tools you run). If you want to perform more tests, each in an isolated environment/workspace, you can start multiple instances from the same Parrot template. Open Virtualization Format OVA is the standard for Virtual Machines and Parrot Linux is Proud to offer OVA for both Parrot Home and Parrot Security. Just import, configure system resources and start the VM. Note: Users have ran into some issues with VMware depending on kernel compatibility and is therefore not recommended. Downloads Previous / Next","title":"Download"},{"location":"getting-started/download/#parrot-security","text":"Parrot Security is our complete all-in-one environment for pentesting, privacy, digital forensics, reverse engineering and software development. The system includes a full arsenal of security oriented tools to to ensure as security professional, you've got everything you need.","title":"Parrot Security"},{"location":"getting-started/download/#parrot-home","text":"Parrot Home is a special edition of Parrot designed for daily use. It's geared toward regular users who need a lightweight, always updated and beautiful system. The distribution has the same look and feel of a regular Parrot environment and includes all the basic programs for daily work. Parrot Home also includes programs to chat privately, encrypt documents with the highest cryptographic standards or surf the net in a completely anonymous and secure way. The system can also be used as a starting point to build a very customized pentesting platform with only the bare essentials, or you can use it to build your professional workstation by taking advantage of all the latest and most powerful technologies of Debian without the hassle.","title":"Parrot Home"},{"location":"getting-started/download/#netinstall-images","text":"Parrot offers netinstall images. Netinstall imges are special lightweight iso files containing only the installer. The installer is configured to partition the disk, establish an internet connection and install the system from scratch by downloading all the packages via internet. The netinstall image can be used to install only the headless Parrot Core, or it can be used to install different Desktop Environments.","title":"Netinstall Images"},{"location":"getting-started/download/#docker-templates","text":"Docker is a powerful containerization technology that allows the user to start multiple instances of a template and use them as isolated environments that can be destroyed and restarted in a matter of seconds. A full virtual machine usually requires more computer resources (ram, cpu time and storage), long installation and configuration times and maintenance. The purpose of Parrot for Docker is to easily offer the whole Parrot toolkit on top of every operating system supported by Docker (*NIX distributions, Mac OS and Windows) without all the negative effects of a full virtualized environment. You can fire up a Parrot container inside your existing system or using a cloud provider in just few seconds, and by using an extremely limited amount of resources (just the memory required by the individual tools you run). If you want to perform more tests, each in an isolated environment/workspace, you can start multiple instances from the same Parrot template.","title":"Docker templates"},{"location":"getting-started/download/#open-virtualization-format","text":"OVA is the standard for Virtual Machines and Parrot Linux is Proud to offer OVA for both Parrot Home and Parrot Security. Just import, configure system resources and start the VM. Note: Users have ran into some issues with VMware depending on kernel compatibility and is therefore not recommended. Downloads Previous / Next","title":"Open Virtualization Format"},{"location":"getting-started/how-to-boot/","text":"System boot So you've downloaded the ISO, you've burned it onto some media, and you're ready to boot Parrot on your computer. In order to do so, simply insert your boot media in the computer and reboot it. Now ensure your BIOS/UEFI is set to boot your removable media first or you'll pass Parrot and go straight to your harddrive. If everything goes well you will be greeted by the Parrot boot screen and soon on to endless fun. USB Drive Obsolete computers If you're using a very old computer you might not be able to boot your system from a USB drive: in this case you will have to use a DVD or another device your computer will recognize as a boot device. New computers Most laptops allow you to access the booting menu pressing f2 or f12; for most desktop computers press f8; for other kind of devices try pressing esc, f12, f11 or f10. Google your manufacturer to find out what makes your system barf up its BIOS. Option disabled For some computers, the booting menu may be disabled by default: you will have to access the BIOS settings and enable such option, reboot the computer and press the right key to access the booting menu. Option is not available Some computers allow you to boot the system from USB drives but don't display a menu to select the booting device. If this is your case you need to access the BIOS settings, go to the booting panel and change the order of which booting devices, placing the USB drive on top of the list. Then simply reboot the computer and the BIOS will choose the USB drive as a booting device. Secure boot In case you have a computer with Secure Boot enabled, you will have to open the BIOS settings, disable secure boot and set it to legacy boot. If your computer doesn't provide a booting menu, follow the instructions displayed on this page in the section above (\u201coption is not available\u201d). If all else fails, google your make and model. It is likely someone has attempted to install Linux also and might have a solution. DVD Booting a system from a DVD is much easier and compatible with most machines. Regular PC You can boot a DVD by using the standard procedure for the USB drive as described above. MAC DVD method on old MACs Turn on your computer, insert the DVD straightaway and press the C key as soon as you hear the beep signaling the computer has been turned on. Release the button after a few seconds, as soon as you hear the DVD has started working. Standard method Insert the Parrot boot device during the booting step and press the ALT key: keep it pressed until the booting device menu has been displayed. Previous /- Next","title":"How To Boot"},{"location":"getting-started/how-to-boot/#system-boot","text":"So you've downloaded the ISO, you've burned it onto some media, and you're ready to boot Parrot on your computer. In order to do so, simply insert your boot media in the computer and reboot it. Now ensure your BIOS/UEFI is set to boot your removable media first or you'll pass Parrot and go straight to your harddrive. If everything goes well you will be greeted by the Parrot boot screen and soon on to endless fun.","title":"System boot"},{"location":"getting-started/how-to-boot/#usb-drive","text":"","title":"USB Drive"},{"location":"getting-started/how-to-boot/#obsolete-computers","text":"If you're using a very old computer you might not be able to boot your system from a USB drive: in this case you will have to use a DVD or another device your computer will recognize as a boot device.","title":"Obsolete computers"},{"location":"getting-started/how-to-boot/#new-computers","text":"Most laptops allow you to access the booting menu pressing f2 or f12; for most desktop computers press f8; for other kind of devices try pressing esc, f12, f11 or f10. Google your manufacturer to find out what makes your system barf up its BIOS.","title":"New computers"},{"location":"getting-started/how-to-boot/#option-disabled","text":"For some computers, the booting menu may be disabled by default: you will have to access the BIOS settings and enable such option, reboot the computer and press the right key to access the booting menu.","title":"Option disabled"},{"location":"getting-started/how-to-boot/#option-is-not-available","text":"Some computers allow you to boot the system from USB drives but don't display a menu to select the booting device. If this is your case you need to access the BIOS settings, go to the booting panel and change the order of which booting devices, placing the USB drive on top of the list. Then simply reboot the computer and the BIOS will choose the USB drive as a booting device.","title":"Option is not available"},{"location":"getting-started/how-to-boot/#secure-boot","text":"In case you have a computer with Secure Boot enabled, you will have to open the BIOS settings, disable secure boot and set it to legacy boot. If your computer doesn't provide a booting menu, follow the instructions displayed on this page in the section above (\u201coption is not available\u201d). If all else fails, google your make and model. It is likely someone has attempted to install Linux also and might have a solution.","title":"Secure boot"},{"location":"getting-started/how-to-boot/#dvd","text":"Booting a system from a DVD is much easier and compatible with most machines.","title":"DVD"},{"location":"getting-started/how-to-boot/#regular-pc","text":"You can boot a DVD by using the standard procedure for the USB drive as described above.","title":"Regular PC"},{"location":"getting-started/how-to-boot/#mac","text":"","title":"MAC"},{"location":"getting-started/how-to-boot/#dvd-method-on-old-macs","text":"Turn on your computer, insert the DVD straightaway and press the C key as soon as you hear the beep signaling the computer has been turned on. Release the button after a few seconds, as soon as you hear the DVD has started working.","title":"DVD method on old MACs"},{"location":"getting-started/how-to-boot/#standard-method","text":"Insert the Parrot boot device during the booting step and press the ALT key: keep it pressed until the booting device menu has been displayed. Previous /- Next","title":"Standard method"},{"location":"getting-started/system-requirements/","text":"Parrot Linux is pretty nimble but requires the following as a bare minimum. Parrot Home Full install x86_64 Processor 2 GB of RAM DDR3 30 GB of Hard drive space Parrot Security Full install x86_64 Processor 2 GB of RAM DDR3 40 GB of Hard drive space Parrot Netinstall x86_64 Processor 512 MB of RAM DDR3 2 GB of Hard drive space Recommended x86_64 Processor 1 GB of RAM DDR3 10 GB of Hard drive space Next","title":"System Requirements"},{"location":"getting-started/system-requirements/#parrot-linux-is-pretty-nimble-but-requires-the-following-as-a-bare-minimum","text":"","title":"Parrot Linux is pretty nimble but requires the following as a bare minimum."},{"location":"getting-started/system-requirements/#parrot-home-full-install","text":"x86_64 Processor 2 GB of RAM DDR3 30 GB of Hard drive space","title":"Parrot Home Full install"},{"location":"getting-started/system-requirements/#parrot-security-full-install","text":"x86_64 Processor 2 GB of RAM DDR3 40 GB of Hard drive space","title":"Parrot Security Full install"},{"location":"getting-started/system-requirements/#parrot-netinstall","text":"x86_64 Processor 512 MB of RAM DDR3 2 GB of Hard drive space","title":"Parrot Netinstall"},{"location":"getting-started/system-requirements/#recommended","text":"x86_64 Processor 1 GB of RAM DDR3 10 GB of Hard drive space Next","title":"Recommended"},{"location":"installation/before-installing/","text":"Backup all your data! Seriously! Please back up all data before install. The install will wipe it all gone . . well pretty much gone it will require a lot of effort to get back if you can. So please back up your system prior to installing. If you are attempting to multi-boot BACKUP that system as well. accidents happen and you don'want to run the risk of losing everything. Ensure you have everything ready, a smart phone or spare system to look up how to troubleshoot some odd problem is invaluable and can save you hours. Ensure you know the limitations of your hardware (don't attempt to install am64 ISO on a 32 bit system) Learn about your BIOS/UEFI before you start installing. Make all necessary changes before you install.","title":"Before installing"},{"location":"installation/before-installing/#backup-all-your-data","text":"","title":"Backup all your data!"},{"location":"installation/before-installing/#seriously-please-back-up-all-data-before-install","text":"The install will wipe it all gone . . well pretty much gone it will require a lot of effort to get back if you can. So please back up your system prior to installing. If you are attempting to multi-boot BACKUP that system as well. accidents happen and you don'want to run the risk of losing everything. Ensure you have everything ready, a smart phone or spare system to look up how to troubleshoot some odd problem is invaluable and can save you hours. Ensure you know the limitations of your hardware (don't attempt to install am64 ISO on a 32 bit system) Learn about your BIOS/UEFI before you start installing. Make all necessary changes before you install.","title":"Seriously! Please back up all data before install."},{"location":"installation/install-parrot/","text":"Parrot Images Security/Home/Workstation These images can be installed from removable DVD, USB or SD storage media. The easiest way to prepare the installation media is to download any of the 64-bit Parrot images that will fit on the device and burn it. Of course this will destroy anything already there. To learn how to burn the images, please see here . Some BIOSes can boot USB or SD card storage directly or allow to boot temporarily from them, and some cannot. You may need to configure your BIOS to boot from a \u201cRemovable Drive\u201d or even a \u201cUSB-ZIP\u201d to get it done. For detailed instructions visit the wiki Netinstall This image is intended to boot from small storage media (like an old USB drive or CD) and install additional packages over a network; hence the name 'netinst'. The image has the software components needed to run the installer and the base packages to provide a minimal Parrot system. There are several architectures to select: amd64, arm64 and armhf. Download whichever type you prefer and burn it. The procedure is the same as described on the above link. I have a Parrot USB or DVD, now what? If you properly followed the precedent tutorial, then you have a bootable USB drive or DVD. These storage devices can be used to boot the computer up with Parrot live environment. Every computer firmware is different, and an unique omnicomprehensive tutorial to boot an external system from USB just does not exist. It is your responsibility to know how your own computer works and how to change boot device on it. Once you booted the system from the USB device you can choose many ways to boot the system from the Parrot Live Boot Menu . Live Mode and Installer The Parrot Boot Menu can let you install the system on your computer, or start it in Live Mode. The live mode is a special boot mode offered by many linux distributions, including Parrot OS, which allows the users to load a fully working linux environment without the need to install it. This is possible because the system is not loaded onto the system's hard drive, instead it is loaded into memory. Parrot OS offers the ability to install the OS while in the live environment offers the ability to test the system without interfering with the computer's hard drive.","title":"Install Parrot"},{"location":"installation/install-parrot/#parrot-images","text":"","title":"Parrot Images"},{"location":"installation/install-parrot/#securityhomeworkstation","text":"These images can be installed from removable DVD, USB or SD storage media. The easiest way to prepare the installation media is to download any of the 64-bit Parrot images that will fit on the device and burn it. Of course this will destroy anything already there. To learn how to burn the images, please see here . Some BIOSes can boot USB or SD card storage directly or allow to boot temporarily from them, and some cannot. You may need to configure your BIOS to boot from a \u201cRemovable Drive\u201d or even a \u201cUSB-ZIP\u201d to get it done. For detailed instructions visit the wiki","title":"Security/Home/Workstation"},{"location":"installation/install-parrot/#netinstall","text":"This image is intended to boot from small storage media (like an old USB drive or CD) and install additional packages over a network; hence the name 'netinst'. The image has the software components needed to run the installer and the base packages to provide a minimal Parrot system. There are several architectures to select: amd64, arm64 and armhf. Download whichever type you prefer and burn it. The procedure is the same as described on the above link.","title":"Netinstall"},{"location":"installation/install-parrot/#i-have-a-parrot-usb-or-dvd-now-what","text":"If you properly followed the precedent tutorial, then you have a bootable USB drive or DVD. These storage devices can be used to boot the computer up with Parrot live environment. Every computer firmware is different, and an unique omnicomprehensive tutorial to boot an external system from USB just does not exist. It is your responsibility to know how your own computer works and how to change boot device on it. Once you booted the system from the USB device you can choose many ways to boot the system from the Parrot Live Boot Menu .","title":"I have a Parrot USB or DVD, now what?"},{"location":"installation/install-parrot/#live-mode-and-installer","text":"The Parrot Boot Menu can let you install the system on your computer, or start it in Live Mode. The live mode is a special boot mode offered by many linux distributions, including Parrot OS, which allows the users to load a fully working linux environment without the need to install it. This is possible because the system is not loaded onto the system's hard drive, instead it is loaded into memory. Parrot OS offers the ability to install the OS while in the live environment offers the ability to test the system without interfering with the computer's hard drive.","title":"Live Mode and Installer"},{"location":"intro/should-i-use-parrot/","text":"Why Parrot is different Even if we, would like everyone to use the Parrot System or, at least, give it a try, there are some important considerations to make about who we expect to use Parrot and who may have a bad experience from it. First of all, even if Parrot provides general purpose flavors, its core is still tuned for Security and Forensics operations. In this section we will explain how different is Parrot compared to other general purpose distributions and how different it is from other Pentest and Forensics distributions. Then we will present some categories of people and what kind of experience they may have by using this system. General purpose distributions Parrot is different from a general purpose distribution (i.e. Ubuntu) because it does not try in any way to hide its internals. Meaning that many automation tools are included in the system to make it easier to use, yet expose quite well what the system has under the hood. A good example is the parrot update reminder : it is a simple yet powerful program that prompts the user to check for system upgrades once a week. but instead of hiding the upgrade process behind a progress bar, it shows the user the full upgrade process from the apt output. Another important difference is that Parrot disables by default all the network services pre-installed in the system, not only to maintain a very low RAM footprint and offer better performance, but also to avoid services exposure in a target network. Every network service needs to be manually started when the user needs it. Pentest distributions Pentest distributions are famous for integrating only security tools, allowing easy root access and taking down all the security system barriers that may influence the workflow of a pentester. Parrot was designed to be a very comfortable environment for security experts and researchers. It includes many basic programs for daily use which pentesting distributions usually exclude (at the cost of less than an additional gigabyte of storage). This choice was taken to make Parrot not only a good system to perform security tests, but also a good environment where you can write reports, build your own tools, and communicate seamlessly with teammates, without the need for additional computers, operating systems or configuration. Our goal is to allow any professional pentester to make a whole security test from the beginning, to the report with just a Parrot ISO and an average laptop. Secure distributions Parrot includes its own sandbox system obtained with the combination of Firejail and AppArmor with custom security profiles. User applications in Parrot are protected and \"jailed\" to limit the damages in case the system is compromised. All this additional security comes with a cost: it is harder to adopt bad behaviors on Parrot. For instance it is not possible to log in as root with the whole desktop environment, or to start critical applications like browsers, media players or advanced document readers with unnecessary privileged permissions. The user can still open root consoles, launch security tools with privileged permissions and use the system without limits. The only thing that changes is that all the critical user applications are now protected from very bad behaviors and common exploit techniques, and the damages caused by advanced exploits are very limited. Forensics distributions Digital forensics experts need an environment that does not compromise their proof. Parrot comes with automount functions disabled by default , to allow forensics acquisitions to be performed in a safe way. The global automount policy is configured in a redundant way in all the layers of the system stack, from the noautomount kernel option passed by default at boot, to the specific file manager settings to disable auto mount and plug play features. Don't forget that the disks are still recognized by the system, and the system will mount them without protections if the user accidentally open them. The no-automount behavior is consistent and stable, but no protection is provided in case of accidental mounts. A write blocker is always recommended in any digital forensics scenario. Who Parrot is made for Security Experts Digital forensics experts Engineering and IT Students Researchers Journalists Hacktivists Wannabe Hackers Police officers and special security institutions","title":"Should I use Parrot?"},{"location":"intro/should-i-use-parrot/#why-parrot-is-different","text":"Even if we, would like everyone to use the Parrot System or, at least, give it a try, there are some important considerations to make about who we expect to use Parrot and who may have a bad experience from it. First of all, even if Parrot provides general purpose flavors, its core is still tuned for Security and Forensics operations. In this section we will explain how different is Parrot compared to other general purpose distributions and how different it is from other Pentest and Forensics distributions. Then we will present some categories of people and what kind of experience they may have by using this system.","title":"Why Parrot is different"},{"location":"intro/should-i-use-parrot/#general-purpose-distributions","text":"Parrot is different from a general purpose distribution (i.e. Ubuntu) because it does not try in any way to hide its internals. Meaning that many automation tools are included in the system to make it easier to use, yet expose quite well what the system has under the hood. A good example is the parrot update reminder : it is a simple yet powerful program that prompts the user to check for system upgrades once a week. but instead of hiding the upgrade process behind a progress bar, it shows the user the full upgrade process from the apt output. Another important difference is that Parrot disables by default all the network services pre-installed in the system, not only to maintain a very low RAM footprint and offer better performance, but also to avoid services exposure in a target network. Every network service needs to be manually started when the user needs it.","title":"General purpose distributions"},{"location":"intro/should-i-use-parrot/#pentest-distributions","text":"Pentest distributions are famous for integrating only security tools, allowing easy root access and taking down all the security system barriers that may influence the workflow of a pentester. Parrot was designed to be a very comfortable environment for security experts and researchers. It includes many basic programs for daily use which pentesting distributions usually exclude (at the cost of less than an additional gigabyte of storage). This choice was taken to make Parrot not only a good system to perform security tests, but also a good environment where you can write reports, build your own tools, and communicate seamlessly with teammates, without the need for additional computers, operating systems or configuration. Our goal is to allow any professional pentester to make a whole security test from the beginning, to the report with just a Parrot ISO and an average laptop.","title":"Pentest distributions"},{"location":"intro/should-i-use-parrot/#secure-distributions","text":"Parrot includes its own sandbox system obtained with the combination of Firejail and AppArmor with custom security profiles. User applications in Parrot are protected and \"jailed\" to limit the damages in case the system is compromised. All this additional security comes with a cost: it is harder to adopt bad behaviors on Parrot. For instance it is not possible to log in as root with the whole desktop environment, or to start critical applications like browsers, media players or advanced document readers with unnecessary privileged permissions. The user can still open root consoles, launch security tools with privileged permissions and use the system without limits. The only thing that changes is that all the critical user applications are now protected from very bad behaviors and common exploit techniques, and the damages caused by advanced exploits are very limited.","title":"Secure distributions"},{"location":"intro/should-i-use-parrot/#forensics-distributions","text":"Digital forensics experts need an environment that does not compromise their proof. Parrot comes with automount functions disabled by default , to allow forensics acquisitions to be performed in a safe way. The global automount policy is configured in a redundant way in all the layers of the system stack, from the noautomount kernel option passed by default at boot, to the specific file manager settings to disable auto mount and plug play features. Don't forget that the disks are still recognized by the system, and the system will mount them without protections if the user accidentally open them. The no-automount behavior is consistent and stable, but no protection is provided in case of accidental mounts. A write blocker is always recommended in any digital forensics scenario.","title":"Forensics distributions"},{"location":"intro/should-i-use-parrot/#who-parrot-is-made-for","text":"Security Experts Digital forensics experts Engineering and IT Students Researchers Journalists Hacktivists Wannabe Hackers Police officers and special security institutions","title":"Who Parrot is made for"},{"location":"intro/what-is-debian/","text":"What is Debian? From Debian.org \"The Debian Project is an association of individuals who have made common cause to create a free operating system. This operating system that we have created is called Debian. An operating system is the set of basic programs and utilities that make your computer run. At the core of an operating system is the kernel. The kernel is the most fundamental program on the computer and does all the basic housekeeping and lets you start other programs. Debian systems currently use the Linux kernel or the FreeBSD kernel. Linux is a piece of software started by Linus Torvalds and supported by thousands of programmers worldwide. FreeBSD is an operating system including a kernel and other software. However, work is in progress to provide Debian for other kernels, primarily for the Hurd. The Hurd is a collection of servers that run on top of a microkernel (such as Mach) to implement different features. The Hurd is free software produced by the GNU project. A large part of the basic tools that fill out the operating system come from the GNU project; hence the names: GNU/Linux, GNU/kFreeBSD, and GNU/Hurd. These tools are also free. Of course, the thing that people want is application software: programs to help them get what they want to do done, from editing documents to running a business to playing games to writing more software. Debian comes with over 51000 packages (precompiled software that is bundled up in a nice format for easy installation on your machine), a package manager (APT), and other utilities that make it possible to manage thousands of packages on thousands of computers as easily as installing a single application. All of it free. It's a bit like a tower. At the base is the kernel. On top of that are all the basic tools. Next is all the software that you run on the computer. At the top of the tower is Debian \u2014 carefully organizing and fitting everything so it all works together.\" Parrot Linux is not affiliated with Debian. Debian is a registered trademark owned by Software in the Public Interest, Inc.","title":"What is Debian?"},{"location":"intro/what-is-debian/#what-is-debian","text":"","title":"What is Debian?"},{"location":"intro/what-is-debian/#from-debianorg","text":"\"The Debian Project is an association of individuals who have made common cause to create a free operating system. This operating system that we have created is called Debian. An operating system is the set of basic programs and utilities that make your computer run. At the core of an operating system is the kernel. The kernel is the most fundamental program on the computer and does all the basic housekeeping and lets you start other programs. Debian systems currently use the Linux kernel or the FreeBSD kernel. Linux is a piece of software started by Linus Torvalds and supported by thousands of programmers worldwide. FreeBSD is an operating system including a kernel and other software. However, work is in progress to provide Debian for other kernels, primarily for the Hurd. The Hurd is a collection of servers that run on top of a microkernel (such as Mach) to implement different features. The Hurd is free software produced by the GNU project. A large part of the basic tools that fill out the operating system come from the GNU project; hence the names: GNU/Linux, GNU/kFreeBSD, and GNU/Hurd. These tools are also free. Of course, the thing that people want is application software: programs to help them get what they want to do done, from editing documents to running a business to playing games to writing more software. Debian comes with over 51000 packages (precompiled software that is bundled up in a nice format for easy installation on your machine), a package manager (APT), and other utilities that make it possible to manage thousands of packages on thousands of computers as easily as installing a single application. All of it free. It's a bit like a tower. At the base is the kernel. On top of that are all the basic tools. Next is all the software that you run on the computer. At the top of the tower is Debian \u2014 carefully organizing and fitting everything so it all works together.\" Parrot Linux is not affiliated with Debian. Debian is a registered trademark owned by Software in the Public Interest, Inc.","title":"From Debian.org"},{"location":"intro/what-is-linux/","text":"What is Linux? From Wikipedia \"Linux is a family of free and open-source software operating systems based on the Linux kernel, an operating system kernel first released on September 17, 1991 by Linus Torvalds. Linux is typically packaged in a Linux distribution (or distro for short). Distributions include the Linux kernel and supporting system software and libraries, many of which are provided by the GNU Project. Many Linux distributions use the word \"Linux\" in their name, but the Free Software Foundation uses the name GNU/Linux to emphasize the importance of GNU software, causing some controversy. Popular Linux distributions include Debian, Fedora, and Ubuntu. Commercial distributions include Red Hat Enterprise Linux and SUSE Linux Enterprise Server. Desktop Linux distributions include a windowing system such as X11 or Wayland, and a desktop environment such as GNOME or KDE Plasma. Distributions intended for servers may omit graphics altogether, and include a solution stack such as LAMP. Because Linux is freely redistributable, anyone may create a distribution for any purpose. Linux was originally developed for personal computers based on the Intel x86 architecture, but has since been ported to more platforms than any other operating system. Linux is the leading operating system on servers and other big iron systems such as mainframe computers, and the only OS used on TOP500 supercomputers (since November 2017, having gradually eliminated all competitors). It is used by around 2.3 percent of desktop computers. The Chromebook, which runs the Linux kernel-based Chrome OS, dominates the US K\u201312 education market and represents nearly 20 percent of sub-$300 notebook sales in the US. Linux also runs on embedded systems, i.e. devices whose operating system is typically built into the firmware and is highly tailored to the system. This includes routers, automation controls, televisions, digital video recorders, video game consoles, and smartwatches. Many smartphones and tablet computers run Android and other Linux derivatives. Because of the dominance of Android on smartphones, Linux has the largest installed base of all general-purpose operating systems. Linux is one of the most prominent examples of free and open-source software collaboration. The source code may be used, modified and distributed\u2014commercially or non-commercially\u2014by anyone under the terms of its respective licenses, such as the GNU General Public License.\" Parrot Linux is not endorsed or affiliated with Linux.","title":"What is Linux?"},{"location":"intro/what-is-linux/#what-is-linux","text":"","title":"What is Linux?"},{"location":"intro/what-is-linux/#from-wikipedia","text":"\"Linux is a family of free and open-source software operating systems based on the Linux kernel, an operating system kernel first released on September 17, 1991 by Linus Torvalds. Linux is typically packaged in a Linux distribution (or distro for short). Distributions include the Linux kernel and supporting system software and libraries, many of which are provided by the GNU Project. Many Linux distributions use the word \"Linux\" in their name, but the Free Software Foundation uses the name GNU/Linux to emphasize the importance of GNU software, causing some controversy. Popular Linux distributions include Debian, Fedora, and Ubuntu. Commercial distributions include Red Hat Enterprise Linux and SUSE Linux Enterprise Server. Desktop Linux distributions include a windowing system such as X11 or Wayland, and a desktop environment such as GNOME or KDE Plasma. Distributions intended for servers may omit graphics altogether, and include a solution stack such as LAMP. Because Linux is freely redistributable, anyone may create a distribution for any purpose. Linux was originally developed for personal computers based on the Intel x86 architecture, but has since been ported to more platforms than any other operating system. Linux is the leading operating system on servers and other big iron systems such as mainframe computers, and the only OS used on TOP500 supercomputers (since November 2017, having gradually eliminated all competitors). It is used by around 2.3 percent of desktop computers. The Chromebook, which runs the Linux kernel-based Chrome OS, dominates the US K\u201312 education market and represents nearly 20 percent of sub-$300 notebook sales in the US. Linux also runs on embedded systems, i.e. devices whose operating system is typically built into the firmware and is highly tailored to the system. This includes routers, automation controls, televisions, digital video recorders, video game consoles, and smartwatches. Many smartphones and tablet computers run Android and other Linux derivatives. Because of the dominance of Android on smartphones, Linux has the largest installed base of all general-purpose operating systems. Linux is one of the most prominent examples of free and open-source software collaboration. The source code may be used, modified and distributed\u2014commercially or non-commercially\u2014by anyone under the terms of its respective licenses, such as the GNU General Public License.\" Parrot Linux is not endorsed or affiliated with Linux.","title":"From Wikipedia"},{"location":"intro/what-is-parrot/","text":"The Parrot System Parrot (Parrot Security, ParrotOS, Parrot GNU/Linux) is a free and open source GNU/Linux distribution based on Debian Testing designed for security experts, developers and privacy aware people. It includes a full portable arsenal for IT security and digital forensics operations, but it also includes everything you need to develop your own programs or protect your privacy while surfing the net. The operating system ships with the MATE desktop environment preinstalled and is available in several flavors to fit your needs. History and Team The first public release appeared on April 10th, 2013 as the result of the work of Lorenzo Faletra who continues to lead development. Originally developed as part of Frozenbox, the effort has grown to include a community of open source developers, professional security experts, advocates of digital rights, and Linux enthusiasts from all around the globe. The project is headquartered in Palermo, Italy and it is supported by an international team of experts and enthusiasts. Who is it designed for The system is designed to be familiar for the security expert and easy to use for the new entry student, but it does not try to hide its internals as other general purpose distributions try to do. Parrot can be used as a daily system , and it provides all the programs for the day to day tasks, including dedicated system flavors that don't ship security tools. Secure Sandboxed Environment People familiar with other pentest distributions may notice that Parrot is quite unique, as it does not allow direct root logins for safety reasons (root can only be used with sudo), and it provides its own sandbox system by combining Firejail and AppArmor with custom security profiles. Software Store The system has its own applications repository including all the packages supported by Debian (more than 56,000 packages available over 4 different architectures), plus many other applications and tools Debian can't provide yet, all of them are accessible directly from the APT package manager. Additionally, Parrot supports SNAP , a new package distribution system that provides easy access to many other programs that GNU/Linux distributions don't always ship in their software archives. Take a look at the snap programs list . Flatpak is an universal software store similar to snap. It can be installed from the Parrot official repository. Parrot supports Wine , a compatibility layer to run Windows applications in Linux environments.","title":"What is Parrot?"},{"location":"intro/what-is-parrot/#the-parrot-system","text":"Parrot (Parrot Security, ParrotOS, Parrot GNU/Linux) is a free and open source GNU/Linux distribution based on Debian Testing designed for security experts, developers and privacy aware people. It includes a full portable arsenal for IT security and digital forensics operations, but it also includes everything you need to develop your own programs or protect your privacy while surfing the net. The operating system ships with the MATE desktop environment preinstalled and is available in several flavors to fit your needs.","title":"The Parrot System"},{"location":"intro/what-is-parrot/#_1","text":"","title":"&nbsp;"},{"location":"intro/what-is-parrot/#history-and-team","text":"The first public release appeared on April 10th, 2013 as the result of the work of Lorenzo Faletra who continues to lead development. Originally developed as part of Frozenbox, the effort has grown to include a community of open source developers, professional security experts, advocates of digital rights, and Linux enthusiasts from all around the globe. The project is headquartered in Palermo, Italy and it is supported by an international team of experts and enthusiasts.","title":"History and Team"},{"location":"intro/what-is-parrot/#who-is-it-designed-for","text":"The system is designed to be familiar for the security expert and easy to use for the new entry student, but it does not try to hide its internals as other general purpose distributions try to do. Parrot can be used as a daily system , and it provides all the programs for the day to day tasks, including dedicated system flavors that don't ship security tools.","title":"Who is it designed for"},{"location":"intro/what-is-parrot/#secure-sandboxed-environment","text":"People familiar with other pentest distributions may notice that Parrot is quite unique, as it does not allow direct root logins for safety reasons (root can only be used with sudo), and it provides its own sandbox system by combining Firejail and AppArmor with custom security profiles.","title":"Secure Sandboxed Environment"},{"location":"intro/what-is-parrot/#software-store","text":"The system has its own applications repository including all the packages supported by Debian (more than 56,000 packages available over 4 different architectures), plus many other applications and tools Debian can't provide yet, all of them are accessible directly from the APT package manager. Additionally, Parrot supports SNAP , a new package distribution system that provides easy access to many other programs that GNU/Linux distributions don't always ship in their software archives. Take a look at the snap programs list . Flatpak is an universal software store similar to snap. It can be installed from the Parrot official repository. Parrot supports Wine , a compatibility layer to run Windows applications in Linux environments.","title":"Software Store"},{"location":"wiki/before-installing/","text":"","title":"Before installing"},{"location":"wiki/helpme/","text":"Welcome to Parrot This system has its own quirks and maybe you want to change something and haven't figured it out or did something on accident and need to undo it. Helpme! \"For when you've lost your shit and can't get it up!\" -Important commands to remember- sudo parrot-upgrade OR sudo apt update sudo apt full-upgrade DO NOT USE apt upgrade It causes all sorts of problems. General things to remember Written by s1udge (with lots of stuff from people smarter than him). Contributors: meu, Palinuro, and KidKlown Rendered in less if on Parrot. v0.0.2 For help with less type h or H. q to quit and come back here or exit. man NAME-OF-STUFF-YOU-WANT-TO-KNOW / is great for learning things you don't know if said item is installed. For all others there's google. / -All Linux versions work like an upside down tree. / is the very begining, hence it is the root directory, also why root is also the godmode for users. /etc/ is your friend as it contains a lot of configuration files. -Global environment variables are stored in /etc/environment -Git commit errors generally take another commit to fix. select-editor to change editors globally. -After setting up your repo ensure you remote add origin YOURSITE.git or life will suck. Troubleshooting Can't install, wanna be like linux guy Paul, maybe raching for the lighter fluid to burn it all. -Don't touch that dial . . er . fluid. Read me instead. uname -a (print system information) cat /etc/*-release (print to screen all distribution-specific information) cat /etc/resolv.conf (displays the DNS information) cat /etc/network/interfaces (displays the network interface configuration) cat /etc/hosts (static values for hostname lookups) lspci (list all PCI devices) lsusb (list USB devices) dmesg (print or control the kernel ring buffer) lsmod (show the status of modules in the Linux kernel) ls -lisart /var/log (the location of the actual logfiles) sudo netstat -pentu (check network connections) If your screen is frozen clap your hands. . .clap . clap If your screen is frozen clap your hands. . .clap . clap If your screen is really frozen and your feelin pretty fucked clap your hands Ok try: CTRL+ALT+F1(or any of the F-number which go to a tty.) If it works login and open htop htop will open a colorful task manager where you can hopefully identify the souless problem program and burn his ey- I mean kill the program with either 15 or 7 for immediate termination. ------Git shortcuts------ git init -to build your repo git push --set-upstream git@WEBSITEYOURPUSHINGTO:YOURUSERNAME/$(git rev-parse --show-toplevel | xargs basename).git $(git rev-parse --abbrev-ref HEAD) / for setting up a remote repo at gitlab / git push REMOTENAME BRANCHNAME / eg origin master or something / git config --global user.signingkey / Assign your key to git globally so you can sign every repo with the same key. Do NOT do this if you have different keys for different repositories! / git tag -a NAMEOFTAG -m \"commit number\" / making a new tag / git tag NAMEOFTAG COMMIT## / First 10 of commit which tags the commit / git tag -s NAMEOFTAG / sign tag / git tag -v NAMEOFTAG / verify tag / git push origin --tags / if you ever want to send your tags with the commits. / git pull --all /*super useful if you need to fetch multiple branchs and merge them with your local branches. git remote set-url origin URL-ADDED-HERE / use if you screw up and upload to the wrong place or your website has changed, handy / git fetch origin / If you need to drop all your changes and get the latest from remote server / git add . / Stages everything / git commit -a -S -m 'commit comment with GPG-sig' git clean -f / delete all untracked changes in the git repo / git reset / used to reset the head or just stage if you added an extra. / git revert / used to unfuck yourself / git commit --amend / fix your comment mistakes / git commit -m \"leave comments for the commit\" git status / tells you if any commits need to happen or staged and waiting / git log / gives you the full log of commits w/o much detail / git log -p -2 / gives you the full difference for the last two log entries in less / git log --stat / gives you abbreviated changes / git log --show-signature -1 / shows your last commit w/ signature / -Also branches can be changed with some work (ensure you are on the branch) git branch -m NEW-NAME / changes the name but only locally / git push origin :OLD-NAME NEW-NAME / now the name is changed but you need one more change. / git push origin -u NEW-NAME / now you've reset the upstream to this name / git remote rm REMOTE-NAME / removes the remote from your list of remotes / -webs- https://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History https://www.atlassian.com/git/tutorials/undoing-changes https://sethrobertson.github.io/GitBestPractices/ https://codeinthehole.com/tips/pull-requests-and-other-good-practices-for-teams-using-github/ \\/Random Linux Commands\\/ - * * * * * * * * * * ***- whereis FILENAME / tells you where the file is and all paths / ps -o 'cmd=' -p $(ps -o 'ppid=' -p $$) / use to find the actual terminal as they often just say xterm256 / $SHELL / to find what shell you run / printenv / to print environment variable of the system / env / environment variables / dpkg -s PACKAGE-LOOKING-4 / shows whether a package is installed / tar -cf $HOME/backup.tar -C $HOME YOURFILES / a technique to back up stuff in your home dir to a tar file. / tar xvf FILENAME.tar.gz -C /DIR/YOU/WANT / x=extract v=verbose (will list all the files) z=uncompress (if you compressed it) f=means you will provide the file name -C=means you want to specify what directory they go. / see below for more info or search manpages. https://www.interserver.net/tips/kb/extract-tar-gz-files-using-linux-command-line/ apropos / used to search manpages globally. / locate FILENAME / only works if you ensure it's database is updated. use: / updatedb / to update the locate database / -use cron jobs to simplify your life. clamAV, rtkit, and others should be cron jobs which automatically execute. -Common Commands (copied from meu) ls (list directory contents) cat (concatenate files and print on the standard output) id (print real and effective user and group IDs) ifconfig (configure a network interface) route -n (show/manipulate the IP routing table) ss -ut (show open UDP/TCP sockets) - * * * * * * * * * * ***- GPG stuff gpg --full-generate-key / until something better comes along you can pick RSA and RSA, then 4096 bit, then never expires, then contact info. NOTE: gpg should make you a revocation file in ~/.gnupg/openpgp-revocs.d or something. when you need to revoke open file with text editor edit out the colon then save and follow the import, clean and delete cmds / gpg --list-keys / gets your current list of keys / gpg --list-secret-keys --keyid-format LONG /* so you can copy your key and generate your public key block (the copy will be after 'sec rsa4096/'. gpg --armor --export KEYNUMBER / gives you that nice big block to verify that this is your key and you signed it! once done copy and paste into whatever you need to sign and save / gpg --import YOURKEYNUMBER.rev / this will REVOKE your key!! making it useless, which is good . . and bad. / gpg --delete-secret-key YOURKEYNUMBER / deletes you secret key. / gpg --delete-key YOURKEYNUMBER / deletes your public key, always delete secret first / -when you need to access your keys, mount and decrypt usb then export. export GNUPGHOME=/media/something gpg -K --OR-- gpg --homedir=media/something -K SSH stuff ssh-keygen -t ed25519 -C \"your@email.com\" /* Generating your SSH key to SSH into places. -t is type ed25519 is currently the best encryption you can have. -C is comment so you can add your email. If using git just copy and paste the inside of your .pub where it tells you on github/gitlab, etc. Then verify it all works. ssh -T git@git.YOUR-GIT-INSTANCE - For parrot-home to set up SSH sudo apt install openssh-server sudo systemctl enable ssh sudo service ssh start - For parrot-security sudo systemctl enable ssh sudo service ssh start Random env stuff (to make you feel at home) change about:config to disable peerconnection for WebRTC (which can leak ip's via STUN Requests). use the following sites to test browser and connection https://www.perfect-privacy.com/webrtc-leaktest/ https://www.expressvpn.com/webrtc-leak-test https://test-ipv6.com/ https://dnsleaktest.com/ https://browserleaks.com/webrtc#webrtc-device-id https://ipleak.org/ https://ipx.ac/run https://ipleak.net/ https://github.com/expressvpn/expressvpn_leak_testing VSCodium settings and shortcuts Ctrl+Shift+P brings up the command palette try ? to get a list of commands Ctrl+P will let you navigate to any file or symbol by typing its name Ctrl+Shift+Tab will cycle you through the last set of files opened Ctrl+Shift+P will bring you directly to the editor commands Ctrl+Shift+O will let you navigate to a specific symbol in a file Ctrl+G will let you navigate to a specific line in a file Vim/Neovim/Nvim ESC then : then q! / if this is your first time. Now if you want to use vim type in vimtutor to terminal and complete it, you virgin! Or use other text editors because you can like Emacs or nano / Neovim works off of vim with some \"enhancements\" (it crashed on me within 45 seconds last time I used it but when it's stable I'm sure it will be awesome.) *--All things Hardware--* journalctl is your friend to check the issues of the day journalctl | grep \"CURRENT-DAY\" NEW-FILE / this will send the days journal to a file you named so you can sift through it. Or you can sent it to less instead of greping it. / Normal drives can be checked with smartctl: sudo apt install smartmontools sudo smartctl -h / then use as needed. / NVMe drives can be checked with nvme-cli. It can be installed with: sudo apt install nvme-cli Then list the NVMes installed: sudo nvme list Under \u2018Node\u2019 you will see a mount path for each drive something like \u2018/dev/nvme0n1\u2019, to access the smart-log you would type in the following: sudo nvme smart-log /dev/nvme0n1 Machine Check Exceptions are hardware failure events and can be logged with rasdaemon.service to journalctl. To install: sudo apt install rasdaemon / verify rasdaemon is active / systemctl status rasdaemon / Then, after the system has crashed or been used for a period of time, take a look at the log: / journalctl -f -u rasdaemon / If there is no log or the log is empty, then the crash isn\u2019t related to a hardware failure. The log will stay empty until a MCE happens. Take a look for \u201cuncorrected\u201d errors, as most \u201ccorrected\u201d errors can be ignored. If there are a consistent number of \u201cuncorrected\u201d errors, the hardware should be examined. / To check mem run the memtest86+ which can be done in BIOS/UEFI","title":"Helpme"},{"location":"wiki/multi-boot-macintosh/","text":"Under Construction Wiki Home","title":"Multi boot macintosh"},{"location":"wiki/multi-boot-unix/","text":"Under Construction Wiki Home","title":"Multi boot unix"},{"location":"wiki/multi-boot-windows/","text":"Wiki Home","title":"Multi boot windows"},{"location":"wiki/pi-and-other-builds/","text":"All builds are currently experimental and not yet ready for release. Last updated Jan 29th 2019. Rpi The Flashing Process It is recommended to use high speed class SD Cards (Class 10) to flash the image otherwise the process may be slow. Use Etcher for GNU/Linux, Win32 Disk Imager for Windows or ApplePiBaker for Mac to load the Parrot image onto the SD card. On a Mac, before plugging in the SD card, run the following in Terminal: df -h This will display a list of all the disks attached to the system. Attach the SD card and run the command again, and note the filesystem name of the SD card (it's the one that wasn't there before). It should look like \"/dev/disk2s1\", be careful in the next steps, since mixing things up could overwrite the hard drive data. Now, use the DD command to load the Parrot image onto the card. Use man dd to see the rest of the operands for dd. First, let's unmount the partition with the following command, with \"x\" being the correct disk number: sudo diskutil unmount /dev/diskX Now Parrot is ready to load. Type, but don't run the command, sudo dd bs=1m if= and enter the location of the Parrot image to load onto the card. Use drag and drop with the disk image into the window to show the file path. After that, type a space, then of=/dev/rdisk and the number of the disk from before. If there is an \"s\" after the initial disk number (like rdisk2s1), do not include the \"s\" or following number. So, \"rdisk2s1\" should look like \"rdisk2.\" Here's what it should look like altogether: sudo dd bs=1m if=LocationOfParrotImage of=/dev/rdiskX Press enter to begin the process, and note that DD does not provide any on-screen information unless there is an error or it finishes. To view the progress during the transfer, type Ctrl+T. Wait for the process to complete. You'll know the process is complete when a readout of bytes transferred over the time the process ran appears. Pine64 Under construction Wiki Home","title":"All builds are currently experimental and not yet ready for release."},{"location":"wiki/pi-and-other-builds/#all-builds-are-currently-experimental-and-not-yet-ready-for-release","text":"","title":"All builds are currently experimental and not yet ready for release."},{"location":"wiki/pi-and-other-builds/#last-updated-jan-29th-2019","text":"","title":"Last updated Jan 29th 2019."},{"location":"wiki/pi-and-other-builds/#rpi","text":"","title":"Rpi"},{"location":"wiki/pi-and-other-builds/#the-flashing-process","text":"It is recommended to use high speed class SD Cards (Class 10) to flash the image otherwise the process may be slow. Use Etcher for GNU/Linux, Win32 Disk Imager for Windows or ApplePiBaker for Mac to load the Parrot image onto the SD card. On a Mac, before plugging in the SD card, run the following in Terminal: df -h This will display a list of all the disks attached to the system. Attach the SD card and run the command again, and note the filesystem name of the SD card (it's the one that wasn't there before). It should look like \"/dev/disk2s1\", be careful in the next steps, since mixing things up could overwrite the hard drive data. Now, use the DD command to load the Parrot image onto the card. Use man dd to see the rest of the operands for dd. First, let's unmount the partition with the following command, with \"x\" being the correct disk number: sudo diskutil unmount /dev/diskX Now Parrot is ready to load. Type, but don't run the command, sudo dd bs=1m if= and enter the location of the Parrot image to load onto the card. Use drag and drop with the disk image into the window to show the file path. After that, type a space, then of=/dev/rdisk and the number of the disk from before. If there is an \"s\" after the initial disk number (like rdisk2s1), do not include the \"s\" or following number. So, \"rdisk2s1\" should look like \"rdisk2.\" Here's what it should look like altogether: sudo dd bs=1m if=LocationOfParrotImage of=/dev/rdiskX Press enter to begin the process, and note that DD does not provide any on-screen information unless there is an error or it finishes. To view the progress during the transfer, type Ctrl+T. Wait for the process to complete. You'll know the process is complete when a readout of bytes transferred over the time the process ran appears.","title":"The Flashing Process"},{"location":"wiki/pi-and-other-builds/#pine64","text":"Under construction Wiki Home","title":"Pine64"},{"location":"wiki/single-system-home/","text":"The Installation Process Computer Once the installer starts the initial screen will appear. Press Enter to boot or read the instructions for other boot methods and parameters. After a while the language selection will show up. Use the arrow keys to pick a language and press Enter to continue. Next the country selection will appear, with the choices including countries of the spoken language. If it's not on the short list, a list of all the countries in the world is available. A keyboard layout will be asked. Choosing the default one is suggested. Now sit back while the installer detects some of the existing hardware, and loads the rest of itself from the media. The installer will try to detect the network hardware and set up networking by DHCP. If the system is not on a network or does not have DHCP then the network can be configured manually. Set up the clock and time zone. The installer will try to contact a time server on the Internet to ensure the clock is set correctly. The time zone is based on the country selected earlier and the installer will only ask to select one if a country has multiple zones. Setting up the clock and time zone is followed by the creation of user accounts. By default a password has to be provided for the \u201croot\u201d (administrator) account and information necessary to create one regular user account. If a password is not specified for the \u201croot\u201d user this account will be disabled but the sudo package will be installed later to enable administrative tasks to be carried out on the new system. Now it is time to partition disks. Automatic partitioning can be done either on an entire drive, or available free space on a drive. This is recommended for new users or anyone in a hurry. If autopartition is not wanted, choose \"Manual\" from the menu. If there is an existing DOS or Windows partition that has to be preserved, be very careful with automatic partitioning. If manual partitioning is selected, the installer can be used to resize existing FAT or NTFS partitions to create room for the Parrot install: simply select the partition and specify its new size. On the next screen the partition table will be seen, how the partitions will be formatted, and where they will be mounted. Select a partition to modify or delete it. If automatic partitioning was selected, the \"Finish\" option can be selected and the changes can be written to disk to use what it set up. Remember to assign at least one partition for swap space and to mount a partition on / . The installer will format partitions and start to install the base system, which can take a while. The last step is to install a boot loader. If the installer detects other operating systems on the computer, it will add them to the boot menu and let GRUB know. By default GRUB will be installed to the master boot record of the first harddrive, which is generally a good choice. That choice can be overridden and install it elsewhere. The installer will now tell that the installation has finished. Remove the media and hit Enter to reboot the machine. It should boot up into the newly installed Parrot system and allow to log in. BOOM Done! Parrot Wiki","title":"The Installation Process"},{"location":"wiki/single-system-home/#the-installation-process","text":"","title":"The Installation Process"},{"location":"wiki/single-system-home/#computer","text":"Once the installer starts the initial screen will appear. Press Enter to boot or read the instructions for other boot methods and parameters. After a while the language selection will show up. Use the arrow keys to pick a language and press Enter to continue. Next the country selection will appear, with the choices including countries of the spoken language. If it's not on the short list, a list of all the countries in the world is available. A keyboard layout will be asked. Choosing the default one is suggested. Now sit back while the installer detects some of the existing hardware, and loads the rest of itself from the media. The installer will try to detect the network hardware and set up networking by DHCP. If the system is not on a network or does not have DHCP then the network can be configured manually. Set up the clock and time zone. The installer will try to contact a time server on the Internet to ensure the clock is set correctly. The time zone is based on the country selected earlier and the installer will only ask to select one if a country has multiple zones. Setting up the clock and time zone is followed by the creation of user accounts. By default a password has to be provided for the \u201croot\u201d (administrator) account and information necessary to create one regular user account. If a password is not specified for the \u201croot\u201d user this account will be disabled but the sudo package will be installed later to enable administrative tasks to be carried out on the new system. Now it is time to partition disks. Automatic partitioning can be done either on an entire drive, or available free space on a drive. This is recommended for new users or anyone in a hurry. If autopartition is not wanted, choose \"Manual\" from the menu. If there is an existing DOS or Windows partition that has to be preserved, be very careful with automatic partitioning. If manual partitioning is selected, the installer can be used to resize existing FAT or NTFS partitions to create room for the Parrot install: simply select the partition and specify its new size. On the next screen the partition table will be seen, how the partitions will be formatted, and where they will be mounted. Select a partition to modify or delete it. If automatic partitioning was selected, the \"Finish\" option can be selected and the changes can be written to disk to use what it set up. Remember to assign at least one partition for swap space and to mount a partition on / . The installer will format partitions and start to install the base system, which can take a while. The last step is to install a boot loader. If the installer detects other operating systems on the computer, it will add them to the boot menu and let GRUB know. By default GRUB will be installed to the master boot record of the first harddrive, which is generally a good choice. That choice can be overridden and install it elsewhere. The installer will now tell that the installation has finished. Remove the media and hit Enter to reboot the machine. It should boot up into the newly installed Parrot system and allow to log in.","title":"Computer"},{"location":"wiki/single-system-home/#boom-done","text":"Parrot Wiki","title":"BOOM Done!"},{"location":"wiki/startpage/","text":"Wiki Start-page Multi-boot Windows Multi-boot Mac Multi-boot UNIX Virtual Machines Experiments! Supported Chipsets Helpme For Developers Last updated Feb 1 2019","title":"Parrot Wiki"},{"location":"wiki/startpage/#_1","text":"","title":"&nbsp;"},{"location":"wiki/startpage/#wiki-start-page","text":"Multi-boot Windows Multi-boot Mac Multi-boot UNIX Virtual Machines Experiments! Supported Chipsets Helpme For Developers Last updated Feb 1 2019","title":"Wiki Start-page"},{"location":"wiki/supported-wifi-chipsets/","text":"List of chipsets Parrot Linux works on: WiFi - TP-Link TL-WN722N v1 WiFi - Panda Pau09 N600 WiFi - Alfa AWUS036NHA WiFi - Alfa AWUSO36NH WiFi - Qualcomm Atheros QCA9337 (If your device works and it is not on the list please leave a post here )","title":"List of chipsets Parrot Linux works on:"},{"location":"wiki/supported-wifi-chipsets/#list-of-chipsets-parrot-linux-works-on","text":"WiFi - TP-Link TL-WN722N v1 WiFi - Panda Pau09 N600 WiFi - Alfa AWUS036NHA WiFi - Alfa AWUSO36NH WiFi - Qualcomm Atheros QCA9337 (If your device works and it is not on the list please leave a post here )","title":"List of chipsets Parrot Linux works on:"},{"location":"wiki/virtual-machines/","text":"Virtual Machines Docker Parrotsec/Parrot-core Official Parrot Security Base system without tools. Start a new instance Public image from Docker Cloud docker run -ti --rm --network host parrotsec/parrot-core Local image from Dockerfile docker run -ti --rm -network host parrot-core Install/Update from Docker Cloud docker pull parrotsec/parrot-core Install/Update from local Dockerfile git clone https://dev.parrotsec.org/parrot/docker-images cd docker-images docker build -t parrot-core[:version] parrot-core Parrotsec/Parrot Official Parrot Security image with basic security tools. -Start a new instance -Public image from Docker Cloud docker run -ti --rm --network host parrotsec/parrot Local image from Dockerfile docker run -ti --rm -network host parrot Install/Update from Docker Cloud docker pull parrotsec/parrot Install/Update from local Dockerfile git clone https://dev.parrotsec.org/parrot/docker-images cd docker-images docker build -t parrot[:version] parrot Parrotsec/Metasploit Parrot Security Metasploit bundle. Install/Update from Docker Cloud docker pull parrotsec/metasploit Install/Update from local Dockerfile git clone https://dev.parrotsec.org/parrot/docker-images cd docker-images docker build -t metasploit[:version] metasploit Start a new instance Public image from Docker Cloud docker run -ti --network host parrotsec/metasploit Local image from Dockerfile docker run -ti -network host metasploit Virtual Machines Under construction.","title":"Virtual Machines"},{"location":"wiki/virtual-machines/#virtual-machines","text":"","title":"Virtual Machines"},{"location":"wiki/virtual-machines/#docker","text":"","title":"Docker"},{"location":"wiki/virtual-machines/#parrotsecparrot-core","text":"Official Parrot Security Base system without tools. Start a new instance Public image from Docker Cloud docker run -ti --rm --network host parrotsec/parrot-core Local image from Dockerfile docker run -ti --rm -network host parrot-core Install/Update from Docker Cloud docker pull parrotsec/parrot-core Install/Update from local Dockerfile git clone https://dev.parrotsec.org/parrot/docker-images cd docker-images docker build -t parrot-core[:version] parrot-core","title":"Parrotsec/Parrot-core"},{"location":"wiki/virtual-machines/#parrotsecparrot","text":"Official Parrot Security image with basic security tools. -Start a new instance -Public image from Docker Cloud docker run -ti --rm --network host parrotsec/parrot Local image from Dockerfile docker run -ti --rm -network host parrot Install/Update from Docker Cloud docker pull parrotsec/parrot Install/Update from local Dockerfile git clone https://dev.parrotsec.org/parrot/docker-images cd docker-images docker build -t parrot[:version] parrot","title":"Parrotsec/Parrot"},{"location":"wiki/virtual-machines/#parrotsecmetasploit","text":"Parrot Security Metasploit bundle. Install/Update from Docker Cloud docker pull parrotsec/metasploit Install/Update from local Dockerfile git clone https://dev.parrotsec.org/parrot/docker-images cd docker-images docker build -t metasploit[:version] metasploit Start a new instance Public image from Docker Cloud docker run -ti --network host parrotsec/metasploit Local image from Dockerfile docker run -ti -network host metasploit","title":"Parrotsec/Metasploit"},{"location":"wiki/virtual-machines/#virtual-machines_1","text":"Under construction.","title":"Virtual Machines"},{"location":"wiki/what-is-live-mode/","text":"What is live mode The live mode is a special boot mode offered by many linux distributions, including Parrot OS, which allows the users to load a fully working linux environment without the need to install it. This is possible because the system is not loaded onto the system's hard drive, instead it is loaded into memory (Random Access Memory). Parrot OS offers the ability to install the OS while in a live environment, use all the tools and even create a persistent live environment. To create a live boot device please read this page . To learn how to boot from the live media read this page instead. Default username and password In Parrot OS live environment the default username is \"user\" and the default password is \"toor\". Wiki Home","title":"What is live mode"},{"location":"wiki/what-is-live-mode/#what-is-live-mode","text":"The live mode is a special boot mode offered by many linux distributions, including Parrot OS, which allows the users to load a fully working linux environment without the need to install it. This is possible because the system is not loaded onto the system's hard drive, instead it is loaded into memory (Random Access Memory). Parrot OS offers the ability to install the OS while in a live environment, use all the tools and even create a persistent live environment. To create a live boot device please read this page . To learn how to boot from the live media read this page instead.","title":"What is live mode"},{"location":"wiki/what-is-live-mode/#default-username-and-password","text":"In Parrot OS live environment the default username is \"user\" and the default password is \"toor\". Wiki Home","title":"Default username and password"}]}